Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
#Function to extract list into a Data Frame
Func_List2DF<-function(list){
df<-data.frame(matrix(unlist(list), nrow=length(list), byrow=T),stringsAsFactors=FALSE)
return(df)
}
lista<-replicate(5,Func_Rep_DR(DF_DR_Analysis),simplify = FALSE )
DF_DR_Rep<-Func_List2DF(lista)
#Analysis For weekly Dose Response
Reps_DR<-100
List_week_DR<-split(x=DF_DR_Analysis,f=DF_DR_Analysis$week)
lista<-replicate(Reps_DR,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
list_Df_Rep<-lapply(lista, Func_List2DF)
list_Df_Rep<-lapply(list_Df_Rep, setNames, c("Infections", "Illness"))
list_Df_Rep<-lapply(list_Df_Rep,bind_rows)
list_Df_Rep<-bind_cols(list_Df_Rep)
df_inf_Week = list_Df_Rep[,seq(1, ncol(list_Df_Rep), 2) ]
df_ill_Week = list_Df_Rep[,seq(2, ncol(list_Df_Rep), 2) ]
df_inf_Week<-as.data.frame(t(df_inf_Week))
df_ill_Week<-as.data.frame(t(df_ill_Week))
rownames(df_inf_Week)<-paste("Rep",1:Reps_DR)
rownames(df_ill_Week)<-paste("Rep",1:Reps_DR)
colnames(df_inf_Week)<-paste("Week",1:Sens_Iterations)
colnames(df_ill_Week)<-paste("Week",1:Sens_Iterations)
#Analysis For weekly Dose Response
Reps_DR<-100
List_week_DR<-split(x=DF_DR_Analysis,f=DF_DR_Analysis$week)
lista<-replicate(Reps_DR,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
list_Df_Rep<-lapply(lista, Func_List2DF)
list_Df_Rep<-lapply(list_Df_Rep, setNames, c("Infections", "Illness"))
list_Df_Rep<-lapply(list_Df_Rep,bind_rows)
list_Df_Rep<-bind_cols(list_Df_Rep)
df_inf_Week = list_Df_Rep[,seq(1, ncol(list_Df_Rep), 2) ]
df_ill_Week = list_Df_Rep[,seq(2, ncol(list_Df_Rep), 2) ]
df_inf_Week<-as.data.frame(t(df_inf_Week))
df_ill_Week<-as.data.frame(t(df_ill_Week))
rownames(df_inf_Week)<-paste("Rep",1:Reps_DR)
rownames(df_ill_Week)<-paste("Rep",1:Reps_DR)
colnames(df_inf_Week)<-paste("Week",1:Sens_Iterations)
colnames(df_ill_Week)<-paste("Week",1:Sens_Iterations)
View(df_ill_Week)
View(df_inf_Week)
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#Setting Working Directory
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop First:
source("Main_Loops2.R")
#Summary DFs for Future.
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#3
ST_ON_Analysis<-Individual_Analysis_Fr
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Share Table Toggle
#Include Share Table:
Share_Table_YN<-0
#NOTE: Turn off Re-Sharing and -ST to reservice too (next section)
# Re-Sharing, Re-Service
#Share Table to Service line after every Day # note turn in 1 if ST on
STtoReservice_YN<-0
#Re-Sharing of Share table items after every service # note turn in 1 is ST on
Resharing_YN<-0
#Running Loop First:
source("Main_Loops2.R")
#Summary DFs for Future.
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#3
ST_OFF_Analysis<-Individual_Analysis_Fr
#Running Loop First:
start_time<-Sys.time()
source("Main_Loops2.R")
#Summary DFs for Future.
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#3
ST_ON_Analysis<-Individual_Analysis_Fr
#Inputs and Source Files
# Source Files ------------------------------------------------------------
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Share Table Toggle
#Include Share Table:
Share_Table_YN<-0
#NOTE: Turn off Re-Sharing and -ST to reservice too (next section)
# Re-Sharing, Re-Service
#Share Table to Service line after every Day # note turn in 1 if ST on
STtoReservice_YN<-0
#Re-Sharing of Share table items after every service # note turn in 1 is ST on
Resharing_YN<-0
#Running Loop First:
start_time<-Sys.time()
source("Main_Loops2.R")
#ST ON
DF_DR_Analysis<-ST_ON_Analysis%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#ST ON
ST_ON_Analysis<-ST_ON_Analysis%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
ST_ON_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
ST_ON_Analysis$Infection<-as.logical("")
ST_ON_Analysis$Illness<-as.logical("")
#Analysis For weekly Dose Response
Reps_DR<-100
List_week_DR<-split(x=ST_ON_Analysis,f=ST_ON_Analysis$week)
lista<-replicate(Reps_DR,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
list_Df_Rep<-lapply(lista, Func_List2DF)
list_Df_Rep<-lapply(list_Df_Rep, setNames, c("Infections", "Illness"))
list_Df_Rep<-lapply(list_Df_Rep,bind_rows)
list_Df_Rep<-bind_cols(list_Df_Rep)
df_inf_Week = list_Df_Rep[,seq(1, ncol(list_Df_Rep), 2) ]
df_ill_Week = list_Df_Rep[,seq(2, ncol(list_Df_Rep), 2) ]
df_inf_Week<-as.data.frame(t(df_inf_Week))
df_ill_Week<-as.data.frame(t(df_ill_Week))
rownames(df_inf_Week)<-paste("Rep",1:Reps_DR)
rownames(df_ill_Week)<-paste("Rep",1:Reps_DR)
colnames(df_inf_Week)<-paste("Week",1:Sens_Iterations)
colnames(df_ill_Week)<-paste("Week",1:Sens_Iterations)
View(df_inf_Week)
View(df_ill_Week)
#Setting Working Directory
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop First:
start_time<-Sys.time()
source("Main_Loops2.R")
#Setting Working Directory
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop First:
start_time<-Sys.time()
source("Main_Loops2.R")
#Summary DFs for Future.
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#3
ST_ON_Analysis<-Individual_Analysis_Fr
#Inputs and Source Files
# Source Files ------------------------------------------------------------
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Share Table Toggle
#Include Share Table:
Share_Table_YN<-0
#NOTE: Turn off Re-Sharing and -ST to reservice too (next section)
# Re-Sharing, Re-Service
#Share Table to Service line after every Day # note turn in 1 if ST on
STtoReservice_YN<-0
#Re-Sharing of Share table items after every service # note turn in 1 is ST on
Resharing_YN<-0
#Running Loop First:
start_time<-Sys.time()
source("Main_Loops2.R")
#ST ON
ST_ON_Analysis<-ST_ON_Analysis%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
ST_ON_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
#ST ON
ST_ON_Analysis<-ST_ON_Analysis%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
ST_ON_Analysis$week <- substr(ST_ON_Analysis$ConsumedBy, 1, 1)
ST_ON_Analysis$Infection<-as.logical("")
ST_ON_Analysis$Illness<-as.logical("")
#Analysis For weekly Dose Response
Reps_DR<-100
List_week_DR<-split(x=ST_ON_Analysis,f=ST_ON_Analysis$week)
lista<-replicate(Reps_DR,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
list_Df_Rep<-lapply(lista, Func_List2DF)
list_Df_Rep<-lapply(list_Df_Rep, setNames, c("Infections", "Illness"))
list_Df_Rep<-lapply(list_Df_Rep,bind_rows)
list_Df_Rep<-bind_cols(list_Df_Rep)
df_inf_Week = list_Df_Rep[,seq(1, ncol(list_Df_Rep), 2) ]
df_ill_Week = list_Df_Rep[,seq(2, ncol(list_Df_Rep), 2) ]
df_inf_Week<-as.data.frame(t(df_inf_Week))
df_ill_Week<-as.data.frame(t(df_ill_Week))
rownames(df_inf_Week)<-paste("Rep",1:Reps_DR)
rownames(df_ill_Week)<-paste("Rep",1:Reps_DR)
colnames(df_inf_Week)<-paste("Week",1:Sens_Iterations)
colnames(df_ill_Week)<-paste("Week",1:Sens_Iterations)
View(df_ill_Week)
ggplot(data = ST_ON_Analysis,aes(x=Contamination, fill=Type, linetype=Type))+
geom_histogram(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = ST_ON_Analysis,aes(x=Contamination))+
geom_histogram(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = ST_ON_Analysis,aes(x=Contamination))+
geom_histogram(colour="black", alpha=.2)+
scale_x_log10(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = ST_ON_Analysis,aes(x=Contamination))+
geom_histogram(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = ST_ON_Analysis,aes(x=Contamination))+
geom_histogram(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
View(ST_ON_Analysis)
ST_ON_Analysis$Category<-""
#Histogram Exposure
ggplot(data = ST_ON_Analysis,aes(x=Contamination))+
geom_bar(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
for (i in nrow(ST_ON_Analysis)){
Conta<-as.numeric(ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Contamination")
if(Conta ==0 ){
ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Category"<-"<0"
} elseif(Conta >0 && Conta< 100 ){
ST_ON_Analysis$Category<-""
for (i in nrow(ST_ON_Analysis)){
Conta<-as.numeric(ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Contamination")
if(Conta ==0 ){
ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Category"<-"<0"
} else if(Conta >0 && Conta< 100 ){
ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Category"<-"<0 - 100"
}else if(Conta > 100 && Conta < 1000 ){
ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Category"<-"100 - 1000"
}else if(Conta > 1000 ){
ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Category"<-">1000"
}
}
for (i in nrow(ST_ON_Analysis)){
Conta<-as.numeric(ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Contamination")
if(Conta ==0 ){
ST_ON_Analysis$Category[i,] <-"<0"
} else if(Conta >0 && Conta< 100 ){
ST_ON_Analysis$Category[i,]  <-"<0 - 100"
}else if(Conta > 100 && Conta < 1000 ){
ST_ON_Analysis$Category[i,]  <-"100 - 1000"
}else if(Conta > 1000 ){
ST_ON_Analysis$Category[i,]  <-">1000"
}
}
ggplot(aes(x=key, y=n, fill=as.factor(value))) +
geom_col() +
geom_text(aes(label=n), position=position_stack(.5)) +
coord_flip()
ggplot(aes(x=key, y=n, fill=as.factor(value))) +
geom_col() +
geom_text(aes(label=n), position=position_stack(.5)) +
coord_flip()
ggplot(aes(x=key, y=n, fill=as.factor(value))) +
geom_col() +
geom_text(aes(label=n), position=position_stack(.5)) +
coord_flip()
ggplot(aes(x=key, y=n, fill=as.factor(value))) +
geom_col() +
geom_text(aes(label=n), position=position_stack(.5)) +
coord_flip()
ST_ON_Analysis$Contamination
ggplot(aes(x=key, y=n, fill=as.factor(value))) +
geom_col() +
geom_text(aes(label=n), position=position_stack(.5)) +
coord_flip()
ST_ON_Analysis$Contamination[3]
for (i in nrow(ST_ON_Analysis)){
Conta<-as.numeric(ST_ON_Analysis[i,colnames(ST_ON_Analysis)]=="Contamination")
if(Conta ==0 ){
ST_ON_Analysis$Category[i] <-"<0"
} else if(Conta >0 && Conta< 100 ){
ST_ON_Analysis$Category[i]  <-"<0 - 100"
}else if(Conta > 100 && Conta < 1000 ){
ST_ON_Analysis$Category[i]  <-"100 - 1000"
}else if(Conta > 1000 ){
ST_ON_Analysis$Category[i]  <-">1000"
}
}
for (i in nrow(ST_ON_Analysis)){
Conta<-as.numeric(ST_ON_Analysis$Contamination[i])
if(Conta ==0 ){
ST_ON_Analysis$Category[i] <-"<0"
} else if(Conta >0 && Conta< 100 ){
ST_ON_Analysis$Category[i]  <-"<0 - 100"
}else if(Conta > 100 && Conta < 1000 ){
ST_ON_Analysis$Category[i]  <-"100 - 1000"
}else if(Conta > 1000 ){
ST_ON_Analysis$Category[i]  <-">1000"
}
}
View(ST_ON_Analysis)
ST_ON_Analysis$Category<-""
for (i in nrow(ST_ON_Analysis)){
Conta<-as.numeric(ST_ON_Analysis$Contamination[i])
if(Conta ==0 ){
ST_ON_Analysis$Category[i] <-"<0"
} else if(Conta >0 && Conta< 100 ){
ST_ON_Analysis$Category[i]  <-"<0 - 100"
}else if(Conta > 100 && Conta < 1000 ){
ST_ON_Analysis$Category[i]  <-"100 - 1000"
}else if(Conta > 1000 ){
ST_ON_Analysis$Category[i]  <-">1000"
}
}
View(ST_OFF_Analysis)
View(ST_ON_Analysis)
for (i in 1:nrow(ST_ON_Analysis)){
Conta<-as.numeric(ST_ON_Analysis$Contamination[i])
if(Conta == 0 ){
ST_ON_Analysis$Category[i] <-"<0"
} else if(Conta >0 && Conta< 100 ){
ST_ON_Analysis$Category[i]  <-"<0 - 100"
}else if(Conta > 100 && Conta < 1000 ){
ST_ON_Analysis$Category[i]  <-"100 - 1000"
}else if(Conta > 1000 ){
ST_ON_Analysis$Category[i]  <-">1000"
}
}
p4 <- ggplot() +
geom_bar(aes(y = percentage, fill = Category), data = ST_ON_Analysis,
stat="identity")
ggplot() +
geom_bar(aes(y = percentage, fill = Category), data = ST_ON_Analysis,
stat="identity")
ggplot(data = ST_ON_Analysis) +
geom_bar(aes(y = percentage, fill = Category),
stat="identity")
ggplot(data = ST_ON_Analysis) +
geom_bar(aes(y = frequency, fill = Category),
stat="identity")
ggplot(data = ST_ON_Analysis) +
geom_bar(aes(y = count(), fill = Category),
stat="identity")
ggplot(ST_ON_Analysis, aes(x=Category, y=percent, fill=Category)) +
geom_bar(stat="identity", width = .7, colour="black", lwd=0.1)
ggplot(ST_ON_Analysis, aes( y=percent, fill=Category)) +
geom_bar(stat="identity", width = .7, colour="black", lwd=0.1)
ggplot(ST_ON_Analysis, aes( fill=Category)) +
geom_bar(stat="identity", width = .7, colour="black", lwd=0.1)
ggplot(ST_ON_Analysis, aes(y = Number) fill=Category)) +
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
ggplot2::
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
