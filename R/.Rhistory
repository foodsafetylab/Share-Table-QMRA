}
}
#Not Consumed items to share table=======================================================
if(Share_Table_YN==1){
#Proability of the student sharing their food.
Share_YN_Food<-ifelse(runif(1)<Pr_share_Food,1,0)
#Fruit
#Items in Share Table:
if(Pick_YN_Fr==1){
if(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Shared"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "Shared")
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="STtimes"]<-Func_Index_DF(Fr_Data.Frame,Fr_Picked,"STtimes")+1
V_Shared_Fr<-(V_Shared_Fr+1)
}else{
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Shared"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "NotShared")
}
}
}
#Pss
if(Pick_YN_Pss==1){
if(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Shared"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Shared")
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="STtimes"]<-Func_Index_DF(Pss_Data.Frame,Pss_Picked,"STtimes")+1
V_Shared_Pss<-(V_Shared_Pss+1)
}else{
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Shared"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "NotShared")
}
}
}
#Pre
if(Pick_YN_Pre==1){
if(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Shared")
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="STtimes"]<-Func_Index_DF(Pre_Data.Frame,Pre_Picked,"STtimes")+1
V_Shared_Pre<-(V_Shared_Pre+1)
}else{
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-" Not Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "NotShared")
}
}
}
#Picking and consuming ST items ==================================================================
#Shared Fruit
Items_Shared<-Fr_Data.Frame$Location == "Shared"
Sum_Shared<-sum(Items_Shared, na.rm = TRUE)
if(Sum_Shared>0){
#Fruit
#Did a student pick an item for the share table?
Pick_ST_YN_Fr<-ifelse(runif(1)<Pr_Pick_ST_Fr,1,0)
#Fruit picked from Share Table.
if(Pick_ST_YN_Fr==1){
Search.df.fr_ST<-Func_Search_Data(Fr_Data.Frame,Fr_Data.Frame$Location,"Shared",1)
#Fruit from share table selected #
Fr_ST_Picked<-as.numeric(Search.df.fr_ST$Apple.No.)
Fr_Data.Frame[as.numeric(row.names(Search.df.fr_ST)),colnames(Search.df.fr)== "Location"]<-"Tray"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Tray")
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Touched")
}
#Contamination from Hand to Fruit or from Fruit to Hand.
if(Pick_ST_YN_Fr==1){
#Contamination from picking item share table
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Fr<-ifelse(runif(1)<Pr_eat_ST_Fr,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Fr==1){
if(Eat_YN_ST_Fr==1){
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Consumed")
#Contamination
if (Wrapping_Apples == 1){
#Cross Contamination at consumption if apples wrapped
Func_Cross_Contamination_Fr_Consumption_Wrapped(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} else if (Wrapping_Apples == 0){
#Cross Contamination @ Consumption apples not wrapped.
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
} #end of if wrapp
}else{
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "NotConsumed")
#Cross Crontamination from apples not consumed from ST
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} #end of eat if
} # end of picking if
}  #end of if to make sure there are ST items
#Shared Pss
Items_Shared_Pss<-Pss_Data.Frame$Location == "Shared"
Sum_Shared_Pss<-sum(Items_Shared_Pss, na.rm = TRUE)
if(Sum_Shared_Pss>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pss<-ifelse(runif(1)<Pr_Pick_ST_Pss,1,0)
#Pss picked from Share Table.
if(Pick_ST_YN_Pss==1){
Search.df.Pss_ST<-Func_Search_Data(Pss_Data.Frame,Pss_Data.Frame$Location,"Shared",1)
#Pss from share table selected #
Pss_ST_Picked<-as.numeric(Search.df.Pss_ST$Pss.No.)
Pss_Data.Frame[as.numeric(row.names(Search.df.Pss_ST)),colnames(Search.df.Pss)== "Location"]<-"Tray"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Tray")
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Touched")
}
#Contamination from Hand to Pss or from Hand to Pss.
if(Pick_ST_YN_Pss==1){
#Contamination at tray
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pss<-ifelse(runif(1)<Pr_eat_ST_Pss,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pss==1){
if(Eat_YN_ST_Pss==1){
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Cross Contamination @ Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Not Consumption
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}
#Shared Pre
Items_Shared_Pre<-Pre_Data.Frame$Location == "Shared"
Sum_Shared_Pre<-sum(Items_Shared_Pre, na.rm = TRUE)
if(Sum_Shared_Pre>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pre<-ifelse(runif(1)<Pr_Pick_ST_Pre,1,0)
#Pre picked from Share Table.
if(Pick_ST_YN_Pre==1){
Search.df.Pre_ST<-Func_Search_Data(Pre_Data.Frame,Pre_Data.Frame$Location,"Shared",1)
#Pre from share table selected #
Pre_ST_Picked<-as.numeric(Search.df.Pre_ST$Pre.No.)
Pre_Data.Frame[as.numeric(row.names(Search.df.Pre_ST)),colnames(Search.df.Pre)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Touched")
}
#Contamination from Hand to Fruit or from Hand to Fruit.
if(Pick_ST_YN_Pre==1){
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pre<-ifelse(runif(1)<Pr_eat_ST_Pre,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pre==1){
if(Eat_YN_ST_Pre==1){
#Updating Values in DF
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}#end of if there is st items loop
}#end of toggle loop
}  #end of first loop
#Updated items from not consumed, not shared, etc to wasted.
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Shared"]<-"Discarded"
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Shared"]<-"Discarded"
}
#Adding Services
Fr_Data.Frame<-func_Add_Services(Fr_Data.Frame)
Pss_Data.Frame<-func_Add_Services(Pss_Data.Frame)
Pre_Data.Frame<-func_Add_Services(Pre_Data.Frame)
#Adding the data to the datalist
datalistFr[[j]]<-Fr_Data.Frame
datalistPss[[j]]<-Pss_Data.Frame
datalistPre[[j]]<-Pre_Data.Frame
source("Output_Services.R")
List_Sens_Fr[[paste(l,k,j)]]<-Fr_Data.Frame
List_Sens_Pss[[paste(l,k,j)]]<-Pss_Data.Frame
List_Sens_Pre[[paste(l,k,j)]]<-Pre_Data.Frame
message("Service #", j)
} #end of second loop
#Creation of the Services Data Frames
Fr_Data = do.call(rbind,datalistFr)
Pss_Data = do.call(rbind,datalistPss)
Pre_Data = do.call(rbind,datalistPre)
#Adding Data into the Datalists
datalistFr_days[[k]]<-Fr_Data
datalistPss_days[[k]]<-Pss_Data
datalistPre_days[[k]]<-Pre_Data
source("Output_Days.R")
message("Day #", k)
}#end of day loop k
source("Output_SummaryStats.R")
source("Output_Visuals.R")
message("Done Gathering Data", l)
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
} #end of l loop for iterations.
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. This one creates the data frame for the wrapped items consumed
Individual_Analysis_Fr_Consumed_NoI<-Individual_Analysis_Fr
Individual_Analysis_Fr_Consumed_NoI<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
Individual_Analysis_Fr_Consumed_NoI$DeltaCont<-Individual_Analysis_Fr_Consumed_NoI$Contamination-Individual_Analysis_Fr_Consumed_NoI$InContamination
#1 Creating DF for the DElta Contamination
IA_Wash<-Individual_Analysis_Fr_Consumed_W[,c(1,18)]
IA_Cont<-Individual_Analysis_Fr_Consumed_NoI[,c(1,18)]
IA_Wrapp<-Individual_Analysis_Fr_Consumed_Wr[,c(1,18)]
IA_Wash$Type<-"Washed"
IA_Cont$Type<-"No Intervention"
IA_Wrapp$Type<-"Wrapped"
names(IA_Wrapp)[2]<-"DeltaCont"
IA_All<-bind_rows(IA_Wash,IA_Cont,IA_Wrapp)
#2. Creating Data Frame for Contamination
IA_Wash_c<-Individual_Analysis_Fr_Consumed_W[,c(1,4)]
IA_Cont_c<-Individual_Analysis_Fr_Consumed_NoI[,c(1,4)]
IA_Wrapp_c<-Individual_Analysis_Fr_Consumed_Wr[,c(1,5)]
IA_Wrapp_Ini<-Individual_Analysis_Fr_Consumed_W[,c(1,6)]
IA_Wash_c$Type<-"Wash"
IA_Cont_c$Type<-"No Intervention"
IA_Wrapp_c$Type<-"Wrapped"
IA_Wrapp_Ini$Type<-"Initial Cont"
names(IA_Wrapp_c)[2]<-"Contamination"
names(IA_Wrapp_Ini)[2]<-"Contamination"
IA_All_c<-bind_rows(IA_Wash_c,IA_Cont_c,IA_Wrapp_c)
IA_All_c[IA_All_c==0]<-(10^-20)
IA_All_cLog<-IA_All_c
IA_All_cLog$Contamination<-log10(IA_All_cLog$Contamination)
IA_All_cLog00<-IA_All_cLog[which(IA_All_cLog$Contamination > 0),]
#Contamination with log
ggplot(data = IA_All_cLog,aes(x=Contamination, fill=Type, linetype=Type))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log PFU/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
#Funtion for boxplot
give.n <- function(x){
return(c(y = median(x)*1.05, label = length(x)))
# experiment with the multiplier to find the perfect position
}
#function median
p_meds <- ddply(IA_All_cLog, .(Type), summarise, median = median(Contamination))
#boxplot Contamination
ggplot(data = IA_All_cLog,aes( y=Contamination, x=Type))+
geom_boxplot(aes(fill=Type),varwidth = TRUE)+
ylab("Contamination Log PFU/Item")+
xlab("Intervention Type")+
ggtitle("Boxplot Intervention Comparison")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(n.breaks = 15)+
stat_summary(fun.data = give.n, geom = "text", fun = median,vjust = -3)+
geom_text(data = p_meds, aes(x = Type, y = median, label = median),
size = 3, vjust = +1.5, color="blue")
#Contamination with log
ggplot(data = IA_All_cLog00,aes(x=Contamination, fill=Type, linetype=Type))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log PFU/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
#Funtion for boxplot
give.n <- function(x){
return(c(y = median(x)*1.05, label = length(x)))
# experiment with the multiplier to find the perfect position
}
#function median
p_meds <- ddply(IA_All_cLog, .(Type), summarise, median = median(Contamination))
#boxplot Contamination
ggplot(data = IA_All_cLog00,aes( y=Contamination, x=Type))+
geom_boxplot(aes(fill=Type),varwidth = TRUE)+
ylab("Contamination Log PFU/Item")+
xlab("Intervention Type")+
ggtitle("Boxplot Intervention Comparison")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(n.breaks = 15)+
stat_summary(fun.data = give.n, geom = "text", fun = median,vjust = -3)+
geom_text(data = p_meds, aes(x = Type, y = median, label = median),
size = 3, vjust = +1.5, color="blue")
#Funtion for boxplot
give.n <- function(x){
return(c(y = median(x)*1.05, label = length(x)))
# experiment with the multiplier to find the perfect position
}
#function median
p_meds <- ddply(IA_All_cLog00, .(Type), summarise, median = median(Contamination))
#boxplot Contamination
ggplot(data = IA_All_cLog00,aes( y=Contamination, x=Type))+
geom_boxplot(aes(fill=Type),varwidth = TRUE)+
ylab("Contamination Log PFU/Item")+
xlab("Intervention Type")+
ggtitle("Boxplot Intervention Comparison")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(n.breaks = 15)+
stat_summary(fun.data = give.n, geom = "text", fun = median,vjust = -3)+
geom_text(data = p_meds, aes(x = Type, y = median, label = median),
size = 3, vjust = +1.5, color="blue")
mass_feces_hands=-3.5
HU_NV_in_Feces=6.65
Genomic_copies_per_PFU=3.65
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
for (i in 1:1000){
mass_feces_hands=-3.5
HU_NV_in_Feces=6.65
Genomic_copies_per_PFU=3.65
HU_NV_in_RR=1.0
Surface_Hands<-98
TE_R_H<-.07
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
RR_Contamination<-(10^HU_NV_in_RR)*Surface_Hands*TE_R_H
FinalCont<-Personal_Contamination+RR_Contamination
Final_Conts<-c(Final_Conts,FinalCont)
}
for (i in 1:1000){
mass_feces_hands=-3.5
HU_NV_in_Feces=6.65
Genomic_copies_per_PFU=3.65
HU_NV_in_RR=1.0
Surface_Hands<-98
TE_R_H<-.07
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
RR_Contamination<-(10^HU_NV_in_RR)*Surface_Hands*TE_R_H
FinalCont<-Personal_Contamination+RR_Contamination
Final_Conts<-c(Final_Conts,FinalCont)
}
Final_Conts<-c()
for (i in 1:1000){
mass_feces_hands=-3.5
HU_NV_in_Feces=6.65
Genomic_copies_per_PFU=3.65
HU_NV_in_RR=1.0
Surface_Hands<-98
TE_R_H<-.07
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
RR_Contamination<-(10^HU_NV_in_RR)*Surface_Hands*TE_R_H
FinalCont<-Personal_Contamination+RR_Contamination
Final_Conts<-c(Final_Conts,FinalCont)
}
FinalConts10DF<-data.frame(
"n"="",
"FinalConts10"=Final_Conts
)
ggplot(data = FinalConts10DF,aes(x=FinalConts10))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log PFU/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
RR_Contamination<-(10^HU_NV_in_RR)*Surface_Hands*TE_R_H
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
RR_Contamination<-(10^HU_NV_in_RR)*Surface_Hands*TE_R_H
Final_Conts<-c()
for (i in 1:1000){
mass_feces_hands=rbetagen(1,4.57,2.55,-8.00,-1.00) #log(g/hands) #add -3.5, #
HU_NV_in_Feces=rlnormTrunc(1,6.65,2.06,0.0,10.98) #log HuNov CG/ g #add 6.15,#
Genomic_copies_per_PFU=rnormTrunc(1,3.65,.98,2.00,5.40) #add 3.66#
HU_NV_in_RR=runif(1,0,2)
Surface_Hands<-runif(1,89,107)
TE_R_H<-rtriang(1,.036,.07,.22)
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
RR_Contamination<-(10^HU_NV_in_RR)*Surface_Hands*TE_R_H
FinalCont<-Personal_Contamination+RR_Contamination
Final_Conts<-c(Final_Conts,FinalCont)
}
mass_feces_hands=-1
HU_NV_in_Feces=10.98
Genomic_copies_per_PFU=5.4
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
for (i in 1:1000){
mass_feces_hands=-1
HU_NV_in_Feces=10.98
Genomic_copies_per_PFU=5.4
HU_NV_in_RR=2.0
Surface_Hands<-98
TE_R_H<-.22
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
RR_Contamination<-(10^HU_NV_in_RR)*Surface_Hands*TE_R_H
FinalCont<-Personal_Contamination+RR_Contamination
Final_Conts<-c(Final_Conts,FinalCont)
}
mass_feces_hands=-1
HU_NV_in_Feces=10.98
Genomic_copies_per_PFU=5.4
HU_NV_in_RR=2.0
Surface_Hands<-98
TE_R_H<-.22
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
RR_Contamination<-(10^HU_NV_in_RR)*Surface_Hands*TE_R_H
FinalCont<-Personal_Contamination+RR_Contamination
mass_feces_hands=rbetagen(10000,4.57,2.55,-8.00,-1.00) #log(g/hands) #add -3.5, #
mass_feces_hands=rbetagen(1000,4.57,2.55,-8.00,-1.00) #log(g/hands) #add -3.5, #
hist(mass_feces_hands)
mass_feces_hands=rbetagen(10000,4.57,2.55,-8.00,-1.00) #log(g/hands) #add -3.5, #
hist(mass_feces_hands)
HU_NV_in_Feces=rlnormTrunc(10000,6.65,2.06,0.0,10.98) #log HuNov CG/ g #add 6.15,#
hist(mass_feces_hands)
hist(HU_NV_in_Feces)
Genomic_copies_per_PFU=rnormTrunc(10000,3.65,.98,2.00,5.40) #add 3.66#
hist(Genomic_copies_per_PFU)
for (i in 1:1000){
mass_feces_hands=-1
HU_NV_in_Feces=10.98
Genomic_copies_per_PFU=5.4
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
FinalCont<-Personal_Contamination
Final_Conts<-c(Final_Conts,FinalCont)
}
FinalConts10DF<-data.frame(
"n"="",
"FinalConts10"=Final_Conts
)
ggplot(data = FinalConts10DF,aes(x=FinalConts10))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log PFU/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
hist(Final_Conts)
hist(Final_Conts,breaks = 20)
hist(Final_Conts,breaks = 2000)
mass_feces_hands=-1
HU_NV_in_Feces=10.98
Genomic_copies_per_PFU=5.4
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
FinalCont<-Personal_Contamination
Final_Conts<-c(Final_Conts,FinalCont)
mass_feces_hands=rbetagen(10000,4.57,2.55,-8.00,-1.00) #log(g/hands) #add -3.5, #
hist(mass_feces_hands)
HU_NV_in_Feces=rlnormTrunc(10000,6.65,2.06,0.0,10.98) #log HuNov CG/ g #add 6.15,#
hist(HU_NV_in_Feces)
Genomic_copies_per_PFU=rnormTrunc(10000,3.65,.98,2.00,5.40) #add 3.66#
hist(Genomic_copies_per_PFU)
mass_feces_hands=rbetagen(10000,4.57,2.55,-8.00,-1.00) #log(g/hands) #add -3.5, #
hist(mass_feces_hands)
Final_Conts<-c()
for (i in 1:1000){
mass_feces_hands=rbetagen(1,4.57,2.55,-8.00,-1.00) #log(g/hands) #add -3.5, #
HU_NV_in_Feces=rlnormTrunc(1,6.65,2.06,0.0,10.98) #log HuNov CG/ g #add 6.15,#
Genomic_copies_per_PFU=rnormTrunc(1,3.65,.98,2.00,5.40) #add 3.66#
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
FinalCont<-Personal_Contamination
Final_Conts<-c(Final_Conts,FinalCont)
}
hist(Final_Conts,breaks = 2000)
hist(Final_Conts)
FinalConts10DF<-data.frame(
"n"="",
"FinalConts10"=Final_Conts
)
hist(Final_Conts)
View(FinalConts10DF)
mass_feces_hands=-1
HU_NV_in_Feces=10.98
Genomic_copies_per_PFU=5.4
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
mass_feces_hands=rbetagen(1,4.57,2.55,-8.00,-1.00) #log(g/hands) #add -3.5, #
HU_NV_in_Feces=rlnormTrunc(1,6.65,2.06,0.0,10.98) #log HuNov CG/ g #add 6.15,#
Genomic_copies_per_PFU=rnormTrunc(1,3.65,.98,2.00,5.40) #add 3.66#
Personal_Contamination<-((10^mass_feces_hands) * (10^HU_NV_in_Feces))/(10^Genomic_copies_per_PFU)
