lisy<-as.data.frame(t(lista))
View(lisy)
hist(x=lisy$infection)
View(lisy)
type(lisy)
class(lisy)
class(lisy$infection)
as.numeric(lisy$infection)
as.numeric(lisy$Illness)
hist(x=lisy$infection)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lisy<-as.data.frame(t(lista))
as.numeric(lisy$infection)
as.numeric(lisy$Illness)
hist(x=lisy$infection)
lisy<-as.data.frame(lisy)
as.numeric(lisy$infection)
as.numeric(lisy$Illness)
as.numeric(lisy$Illness)
hist(x=lisy$infection)
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#Setting Working Directory
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lisy<-as.data.frame(t(lista))
View(lisy)
hist(lisy$infection)
LisyInf<-as.vector(lisy$infection)
lisy<-as.data.frame.array(t(lista))
lisy<-as.data.frame(t(lista))
View(lisy)
LisyInf<-as.numeric(lisy$infection)
hist(LisyInf)
lisy<-as.data.frame.numeric(t(lista))
lisy<-as.data.frame(t(lista))
LisyInf<-as.numeric(lisy$infection)
hist(LisyInf)
LisyIll<-as.numeric(lisy$Illness)
hist(LisyIll)
View(DF_DR_Analysis)
#Setting Working Directory
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lisy<-as.data.frame(t(lista))
LisyInf<-as.numeric(lisy$infection)
LisyIll<-as.numeric(lisy$Illness)
hist(LisyInf)
hist(LisyIll)
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
View(Individual_Analysis_Fr)
#Setting Working Directory
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lisy<-as.data.frame(t(lista))
LisyInf<-as.numeric(lisy$infection)
LisyIll<-as.numeric(lisy$Illness)
hist(LisyInf)
hist(LisyIll)
lapply(split(DF_DR_Analysis,week))
#Analysis For weekly Dose Response
sapply(split(DF_DR_Analysis, week), Func_Rep_DR)
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Analysis For weekly Dose Response
sapply(split(DF_DR_Analysis, week), Func_Rep_DR)
#Analysis For weekly Dose Response
sapply(split(DF_DR_Analysis, week), Func_Rep_DR)
View(DF_DR_Analysis)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
View(Individual_Analysis_Fr)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
View(DF_DR_Analysis)
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy && week)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy & week)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
View(DF_DR_Analysis)
DF_DR_Analysis[substr(DF_DR_Analysis$ConsumedBy,1,1)=="1","week"]<-"1"
DF_DR_Analysis[substr(DF_DR_Analysis$ConsumedBy,1,1)==x,"week"]<-x
fuct_m_week<-function(x){
DF_DR_Analysis[substr(DF_DR_Analysis$ConsumedBy,1,1)==x,"week"]<-x
}
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
View(DF_DR_Analysis)
View(DF_DR_Analysis)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Analysis For weekly Dose Response
sapply(split(DF_DR_Analysis, week), Func_Rep_DR)
View(DF_DR_Analysis)
#Analysis For weekly Dose Response
lapply(split(DF_DR_Analysis, week), Func_Rep_DR)
#Analysis For weekly Dose Response
split(DF_DR_Analysis,week)
#Analysis For weekly Dose Response
split?
#Analysis For weekly Dose Response
?split
#Analysis For weekly Dose Response
split?
#Analysis For weekly Dose Response
split(DF_DR_Analysis, DF_DR_Analysis$week)
#Analysis For weekly Dose Response
split(DF_DR_Analysis, DF_DR_Analysis$week)
#Analysis For weekly Dose Response
lapply(split(DF_DR_Analysis, DF_DR_Analysis$week))
#Analysis For weekly Dose Response
lapply(DF_DR_Analysis,split(DF_DR_Analysis, DF_DR_Analysis$week))
#Analysis For weekly Dose Response
sapply(X = DF_DR_Analysis,... =DF_DR_Analysis$week ,FUN = split())
#Analysis For weekly Dose Response
sapply(X = DF_DR_Analysis,f = DF_DR_Analysis$week ,FUN = split())
#Analysis For weekly Dose Response
sapply(X = DF_DR_Analysis,f = DF_DR_Analysis$week ,FUN = split())
#Analysis For weekly Dose Response
sapply(X = DF_DR_Analysis,DF_DR_Analysis$week ,FUN = split())
#Analysis For weekly Dose Response
sapply(X = DF_DR_Analysis,FUN = split(),f=DF_DR_Analysis$week)
#Analysis For weekly Dose Response
lapply(X = DF_DR_Analysis,FUN = split(),f=DF_DR_Analysis$week)
#Analysis For weekly Dose Response
lapply(X = DF_DR_Analysis,FUN = split(),f=week)
#Analysis For weekly Dose Response
lapply(X = DF_DR_Analysis,FUN = split(f=DF_DR_Analysis$week))
#Analysis For weekly Dose Response
lapply(FUN = split(x=DF_DR_Analysis,f=DF_DR_Analysis$week))
#Analysis For weekly Dose Response
l<-split(x=DF_DR_Analysis,f=DF_DR_Analysis$week)
#Analysis For weekly Dose Response
List_week_DR<-split(x=DF_DR_Analysis,f=DF_DR_Analysis$week)
lista<-replicate(100,Func_Rep_DR(List_week_DR),simplify = TRUE )
lista<-replicate(100,Func_Rep_DR(List_week_DR),simplify = TRUE )
lapply(Func_Rep_DR,List_week_DR)
lapply(List_week_DR,Func_Rep_DR)
lista<-replicate(5,lapply(List_week_DR,Func_Rep_DR),simplify = TRUE)
lisy<-as.data.frame(t(lista))
View(lisy)
View(lista)
lisy<-as.data.frame(t(lista))
View(lisy)
View(lisy[[1]][[1]])
lista<-replicate(5,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
View(lista)
lisy<-lapply(as.data.frame(t(lista)))
lisy<-lapply(lista,as.data.frame(t()))
lisy<-lapply(X=lista,FUN=as.data.frame(t()))
apply(X = lista, FUN= as.data.frame())
lapply(X = lista, FUN= as.data.frame())
View(lista)
View(lista)
as.data.frame(lista)
as.data.frame(t(lista))
lisy<-as.data.frame(t(lista))
View(lisy)
View(lisy[[1]][[1]])
lista<-replicate(5,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
View(lista)
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR_Inf<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
return(Number_Inf_Fr)
}
Func_Rep_DR_Ill<-function(DF_DR_Analysis){
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
return(Number_Ill_Fr)
}
Rep_Inf<-replicate(100,Func_Rep_DR_Inf(DF_DR_Analysis),simplify = TRUE )
Rep_Ill<-replicate(100,Func_Rep_DR_Ill(DF_DR_Analysis),simplify = TRUE )
lista<-replicate(5,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
View(lista)
do.call(as.data.frame(),lista)
df111 <- data.frame(matrix(unlist(lista), nrow=length(lista), byrow=T),stringsAsFactors=FALSE)
View(df111)
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
data.frame(matrix(unlist(lista), nrow=length(lista), byrow=T),stringsAsFactors=FALSE)
df111<-data.frame(matrix(unlist(lista), nrow=length(lista), byrow=T),stringsAsFactors=FALSE)
View(df111)
lista<-replicate(5,Func_Rep_DR(DF_DR_Analysis),simplify = FALSE )
df111<-data.frame(matrix(unlist(lista), nrow=length(lista), byrow=T),stringsAsFactors=FALSE)
View(df111)
Func_List2DF<-function(list){
df111<-data.frame(matrix(unlist(list), nrow=length(list), byrow=T),stringsAsFactors=FALSE)
}
DF_DR_Rep<-Func_List2DF(lista)
lista<-replicate(5,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
list_Df_Rep<-lapply(lista, Func_List2DF)
View(list_Df_Rep)
