Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Cross Contamination @ Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Not Consumption
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Pss_Data.Frame, Item_Picked= Pss_ST_Picked, Item="PSS")
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}
#Shared Pre
Items_Shared_Pre<-Pre_Data.Frame$Location == "Shared"
Sum_Shared_Pre<-sum(Items_Shared_Pre, na.rm = TRUE)
if(Sum_Shared_Pre>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pre<-ifelse(runif(1)<Pr_Pick_ST_Pre,1,0)
#Pre picked from Share Table.
if(Pick_ST_YN_Pre==1){
Search.df.Pre_ST<-Func_Search_Data(Pre_Data.Frame,Pre_Data.Frame$Location,"Shared",1)
#Pre from share table selected #
Pre_ST_Picked<-as.numeric(Search.df.Pre_ST$Pre.No.)
Pre_Data.Frame[as.numeric(row.names(Search.df.Pre_ST)),colnames(Search.df.Pre)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Touched")
}
#Contamination from Hand to Fruit or from Hand to Fruit.
if(Pick_ST_YN_Pre==1){
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Pre_Data.Frame, Item_Picked= Pre_ST_Picked, Item="PRE")
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pre<-ifelse(runif(1)<Pr_eat_ST_Pre,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pre==1){
if(Eat_YN_ST_Pre==1){
#Updating Values in DF
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Pre_Data.Frame, Item_Picked= Pre_ST_Picked, Item="PRE")
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}#end of if there is st items loop
}#end of toggle loop
}  #end of first loop
#Updated items from not consumed, not shared, etc to wasted.
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Shared"]<-"Discarded"
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Shared"]<-"Discarded"
}
#Adding Services
Fr_Data.Frame<-func_Add_Services(Fr_Data.Frame)
Pss_Data.Frame<-func_Add_Services(Pss_Data.Frame)
Pre_Data.Frame<-func_Add_Services(Pre_Data.Frame)
#Adding the data to the datalist
datalistFr[[j]]<-Fr_Data.Frame
datalistPss[[j]]<-Pss_Data.Frame
datalistPre[[j]]<-Pre_Data.Frame
source("Output_Services.R")
List_Sens_Fr[[paste(l,k,j)]]<-Fr_Data.Frame
List_Sens_Pss[[paste(l,k,j)]]<-Pss_Data.Frame
List_Sens_Pre[[paste(l,k,j)]]<-Pre_Data.Frame
message("Service #", j)
} #end of second loop
#Creation of the Services Data Frames
Fr_Data = do.call(rbind,datalistFr)
Pss_Data = do.call(rbind,datalistPss)
Pre_Data = do.call(rbind,datalistPre)
#Adding Data into the Datalists
datalistFr_days[[k]]<-Fr_Data
datalistPss_days[[k]]<-Pss_Data
datalistPre_days[[k]]<-Pre_Data
source("Output_Days.R")
message("Day #", k)
}#end of day loop k
source("Summary_WeekSens.R")
source("Summary_WeeksDR.R")
message("Done Gathering Data", l)
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
} #end of l loop for iterations.
warnings()
View(Vector_Contamination)
View(Vector_Contaminations)
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
Plot_Total_Fr_Contamination_Stag<-Exposure_Staggered_Function2(Total_Consumed_Fr_Bind,Contamination = Contamination, Type = Type, "Total Exposure Fruit", "Contamination per Fruit log CFU/Fruit", "Count of Fruit Consumed")
Plot_Total_Pss_Contamination_Stag<-Exposure_Staggered_Function2(Total_Consumed_Pss_Bind,Contamination = Contamination, Type = Type, "Total Exposure Pss","Contamination per Pss log CFU/Pss", "Count of PSs Consumed")
Plot_Total_Pre_Contamination_Stag<-Exposure_Staggered_Function2(Total_Consumed_Pre_Bind,Contamination = Contamination, Type = Type, "Total Exposure Pre", "Contamination per Pre log CFU/Pre", "Count of Pre Consumed")
#Fruit
#Total Exposure
Plot_Total_Fr_Contamination<-Exposure_Plot_Function3(Total_Consumed_Fr, "Exposure total Fruit Consumed", "Contamination per Fruit log CFU/Fruit", "Count of Fruit Consumed")
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Narrowing down to consumed Items for exposure compisons
Individual_Analysis_Fr<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
View(Individual_Analysis_Fr)
Individual_Analysis_Fr$Contamination[Individual_Analysis_Fr$Contamination==0]<-(10^-20)
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination, fill=Type, linetype=Type))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Narrowing down to consumed Items for exposure compisons
Individual_Analysis_Fr<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
Individual_Analysis_Fr$Contamination[Individual_Analysis_Fr$Contamination==0]<-(10^-20)
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
Individual_Analysis_Fr$Contamination[Individual_Analysis_Fr$Contamination==0]<-(10^-5)
View(Individual_Analysis_Fr)
#Visual That Matter:
#Creating Data Frame of Consumed Items
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Narrowing down to consumed Items for exposure compisons
Individual_Analysis_Fr<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
Individual_Analysis_Fr$Contamination[Individual_Analysis_Fr$Contamination==0]<-(10^-5)
View(Individual_Analysis_Fr)
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination)){
geom_histogram()
}
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram()
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30)
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30)+
scale_x_log10()
Individual_Analysis_Fr$Contamination<-log10(Individual_Analysis_Fr$Contamination)
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination))+
geom_density(colour="black", alpha=.1)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination))+
geom_density(colour="black", alpha=.2, fill="blue")+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30)+
scale_x_log10()
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30)
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination))+
geom_density(colour="black", alpha=.2, fill="blue")+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curve Final Contamination")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30)
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30, fill="magenta")
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30, fill="blue")
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30, fill="blue")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30, fill="aquamarine2")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
geom_histogram(bins = 30, fill="steelblue3")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
ggtitle("Histogram Exposure Fruit, no Intervention")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
ggtitle("Histogram Exposure Fruit, no Intervention")+
theme(plot.title = element_text(hjust = 0.5))+
geom_histogram(bins = 30, fill="steelblue3")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
Individual_Analysis_Fr$InContamination<-log10(Individual_Analysis_Fr$InContamination)
ggplot(data = Individual_Analysis_Fr, aes(x=InContamination))+
ggtitle("Histogram Exposure Fruit, no Intervention")+
theme(plot.title = element_text(hjust = 0.5))+
geom_histogram(bins = 30, fill="steelblue3")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
#Visual That Matter:
#Creating Data Frame of Consumed Items
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Narrowing down to consumed Items for exposure compisons
Individual_Analysis_Fr<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
Individual_Analysis_Fr$Contamination[Individual_Analysis_Fr$Contamination==0]<-(10^-5)
Individual_Analysis_Fr$InContamination[Individual_Analysis_Fr$InContamination==0]<-(10^-5)
Individual_Analysis_Fr$Contamination<-log10(Individual_Analysis_Fr$Contamination)
Individual_Analysis_Fr$InContamination<-log10(Individual_Analysis_Fr$InContamination)
ggplot(data = Individual_Analysis_Fr, aes(x=InContamination))+
ggtitle("Histogram Exposure Fruit, no Intervention")+
theme(plot.title = element_text(hjust = 0.5))+
geom_histogram(bins = 30, fill="steelblue3")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
ggplot(data = Individual_Analysis_Fr,aes(x=InContamination))+
geom_density(colour="black", alpha=.2, fill="blue")+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curve Final Contamination")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr,aes(x=Contamination))+
geom_density(colour="black", alpha=.2, fill="blue")+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log GEC/Item")+
ylab("Density")+
ggtitle("Density Curve Final Contamination")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
ggtitle("Histogram Exposure Fruit, no Intervention")+
theme(plot.title = element_text(hjust = 0.5))+
geom_histogram(bins = 30, fill="steelblue3")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
ggplot(data = Individual_Analysis_Fr, aes(x=InContamination))+
ggtitle("Histogram Exposure Fruit, no Intervention")+
theme(plot.title = element_text(hjust = 0.5))+
geom_histogram(bins = 30, fill="steelblue3")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
ggplot(data = Individual_Analysis_Fr, aes(x=Contamination))+
ggtitle("Histogram Exposure Fruit Consumed, no Intervention")+
theme(plot.title = element_text(hjust = 0.5))+
geom_histogram(bins = 30, fill="steelblue3")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
ggplot(data = Individual_Analysis_Fr, aes(x=InContamination))+
ggtitle("Histogram Initial Contamination Fruit")+
theme(plot.title = element_text(hjust = 0.5))+
geom_histogram(bins = 30, fill="steelblue3")+
xlab("Contamination log GEC/Item")+
ylab("Count of Fruit")
# Analysis of Individual Fruit Items --------------------------------------
#1. Start from here
#This section creates a data frame with every item, Including repeated items, since it is a snapshot of the end of every service
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Create a vector to explain if something were in the share table
STYN_Vector<-c()
for (i in 1:nrow(Individual_Analysis_Fr)){
if (Individual_Analysis_Fr[i,colnames(Individual_Analysis_Fr)=="STtimes"]>0){
STYN_Vector<-c(STYN_Vector,TRUE)
}else if(Individual_Analysis_Fr[i,colnames(Individual_Analysis_Fr)=="STtimes"]==0){
STYN_Vector<-c(STYN_Vector,FALSE)
}
}
#4. Number of touches
Touches_Number<-lengths(regmatches(Individual_Analysis_Fr$History, gregexpr("Touched", Individual_Analysis_Fr$History)))
#5. Running Average Contamination of student that touches specific fruit.
ListTouches<-strsplit(Individual_Analysis_Fr$TouchesContHist,",")
ListTouches<-lapply(ListTouches, function(x) x[x!="NA"])
ListTouches<-lapply(ListTouches, function(x) as.numeric(x))
TouchesContHist<-sapply(X = ListTouches, FUN = mean)
Individual_Analysis_Fr$TouchesContHistAvr<-TouchesContHist
sum(is.na(TouchesContHist))
#6. Creation of Dataframe for indvidual Analysis
Analysis_Individual<-data.frame(
"InContamination"=Individual_Analysis_Fr$InContamination,
"TouchesNo"=Touches_Number,
"TouchesContHistAvr"=Individual_Analysis_Fr$TouchesContHistAvr,
"STTimes"= Individual_Analysis_Fr$STtimes,
"TotServices"=Individual_Analysis_Fr$TotServices,
"Shared"=STYN_Vector,
"DeltaCont"= (Individual_Analysis_Fr$Contamination-Individual_Analysis_Fr$InContamination),
"Contamination" = Individual_Analysis_Fr$Contamination
)
#7.  Sensitivity Analysis of table
# More graphs
mean(Analysis_Individual$TouchesNo)
View(Analysis_Individual)
Analysis_Individual$InContamination[Analysis_Individual$InContamination==0]<-(10^-5)
Analysis_Individual$Contamination[Analysis_Individual$Contamination==0]<-(10^-5)
#Analysis_Individual$TouchesContHistAvr[Analysis_Individual$TouchesContHistAvr==0]<-(10^-5)
Analysis_Individual$InContamination<-log10(Analysis_Individual$InContamination)
Analysis_Individual$Contamination<-log10(Analysis_Individual$Contamination)
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = log,n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=10)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
View(Analysis_Individual)
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=80)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=5)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log  GEC/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=5)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
