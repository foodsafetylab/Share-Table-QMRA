Search.df.Pss_touched<-Func_seach_Data4(Pss_Data.Frame,Pss_Data.Frame$Location,"Selection Table",Row_size_Pss) #Searching for Pss to touch
Pss_Touched<-as.numeric(Search.df.Pss_touched$Pss.No.) #Pss touched
Pss_Data.Frame[Pss_Touched,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Touched,colnames(Pss_Data.Frame)=="History"], "Touched") #Adding History to History
#Cross Contamination from Touching Pss @Touch
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student ,Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Touched)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Touched) #Adding Allergen Contamination from touch.
}
}
}
#Student picking Pss from line
Pick_YN_Pss<-ifelse(runif(1)<Pr_select_Pss,1,0)
#Picking a Pss from Pss Data Frame
if(Pick_YN_Pss==1){
Pss_Available<-Pss_Data.Frame$Location == "Selection Table"
Sum_Pss_Available<-sum(Pss_Available, na.rm = TRUE)
if(Sum_Pss_Available>0){
Search.df.Pss<-Func_seach_Data4(Pss_Data.Frame,Pss_Data.Frame$Location,"Selection Table",Row_size_Pss)
#Pss Selected #
Pss_Picked<-as.numeric(Search.df.Pss$Pss.No.)
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Tray"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Tray")
}
}
#Contamination From Hands to Pss going to Tray
if(Pick_YN_Pss==1){
#Cross Contamination from Touching Pss @Tray
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student ,Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Picked) #Adding Allergen Contamination from touch.
}
#PRE
#Did the Student touch any Pre during selection?
Touch_YN_Pre<-ifelse(runif(1)<Pr_touch_Food,1,0)
#If touched what is the contamination and adding it to data frame
if(Touch_YN_Pre==1){
Pre_Available<-Pre_Data.Frame$Location == "Selection Table"
Sum_Pre_Available<-sum(Pre_Available, na.rm = TRUE)
if(Sum_Pre_Available>ntouched_Pre){
for (i in 1:ntouched_Pre){
#Searching the Touched Pre
Search.df.Pre_touched<-Func_seach_Data4(Pre_Data.Frame,Pre_Data.Frame$Location,"Selection Table",Row_size_Pre) #Searching for Pre to touch
Pre_Touched<-as.numeric(Search.df.Pre_touched$Pre.No.) #Pre touched
Pre_Data.Frame[Pre_Touched,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Touched,colnames(Pre_Data.Frame)=="History"], "Touched") #Adding History to History
#Cross Contamination from Touching Pre @Touch
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Touched)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Touched) #Adding Allergen Contamination from touch.
}
}
}
#Picking Pre from line
Pick_YN_Pre<-ifelse(runif(1)<Pr_select_Pre,1,0)
#Picking a Pre from Pre Data Frame
if(Pick_YN_Pre==1){
Pre_Available<-Pre_Data.Frame$Location == "Selection Table"
Sum_Pre_Available<-sum(Pre_Available, na.rm = TRUE)
if(Sum_Pre_Available>0){
Search.df.Pre<-Func_seach_Data4(Pre_Data.Frame,Pre_Data.Frame$Location,"Selection Table",Row_size_Pre)
#Pre Selected #
Pre_Picked<-as.numeric(Search.df.Pre$Pre.No.)
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
}
}
#Contamination From Hands to Pre going to Tray
if(Pick_YN_Pre==1){
#Cross Contamination from Touching Pre @Tray
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Picked) #Adding Allergen Contamination from touch.
}
# Consumption==========================================================================
#Fruit
#Did the student consume the Fruit?
Eat_YN_Fr<-ifelse(runif(1)<Pr_eat_Fr,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_YN_Fr==1){
if(Eat_YN_Fr==1){
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Consumed"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "Consumed")
#Contamination
if (Wrapping_Apples == 1){
#Cross Contamination at consumption if apples wrapped
Func_Cross_Contamination_Fr_Consumption_Wrapped(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_Picked) #Adding Allergen Contamination from touch.
} else if (Wrapping_Apples == 0){
#Cross Contamination @ Consumption apples not wrapped.
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
} #end of if wrapp
}else{
#Updating Location and History for consumption
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Consumed"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "NotConsumed")
#Cross Crontamination from apples not being Consumed touch to ST/ Trash
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_Picked) #Adding Allergen Contamination from touch.
} #end of eat if statement
}#end of pick statement
#Pss
#Did student consume the Pss
Eat_YN_Pss<-ifelse(runif(1)<Pr_eat_Pss,1,0)
#Changing Data Frame for consumption of Pss
if(Pick_YN_Pss==1){
if(Eat_YN_Pss==1){
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Contamination Insdide Pss @Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Picked) #Adding Allergen Contamination from touch.
}else{
#Updating Data frame Location and History
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Consumption
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Picked) #Adding Allergen Contamination from touch.
} #end of Else statement for Eat
} #end of If
#Pre
#Did student consume the Pre
Eat_YN_Pre<-ifelse(runif(1)<Pr_eat_Pre,1,0)
#Changind Data Frame for consumption of Pre
if(Pick_YN_Pre==1){
if(Eat_YN_Pre==1){
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Picked) #Adding Allergen Contamination from touch.
}
}
#Not Consumed items to share table=======================================================
if(Share_Table_YN==1){
#Proability of the student sharing their food.
Share_YN_Food<-ifelse(runif(1)<Pr_share_Food,1,0)
#Fruit
#Items in Share Table:
if(Pick_YN_Fr==1){
if(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Shared"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "Shared")
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="STtimes"]<-Func_Index_DF(Fr_Data.Frame,Fr_Picked,"STtimes")+1
V_Shared_Fr<-(V_Shared_Fr+1)
}else{
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Shared"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "NotShared")
}
}
}
#Pss
if(Pick_YN_Pss==1){
if(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Shared"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Shared")
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="STtimes"]<-Func_Index_DF(Pss_Data.Frame,Pss_Picked,"STtimes")+1
V_Shared_Pss<-(V_Shared_Pss+1)
}else{
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Shared"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "NotShared")
}
}
}
#Pre
if(Pick_YN_Pre==1){
if(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Shared")
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="STtimes"]<-Func_Index_DF(Pre_Data.Frame,Pre_Picked,"STtimes")+1
V_Shared_Pre<-(V_Shared_Pre+1)
}else{
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-" Not Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "NotShared")
}
}
}
#Picking and consuming ST items ==================================================================
#Shared Fruit
Items_Shared<-Fr_Data.Frame$Location == "Shared"
Sum_Shared<-sum(Items_Shared, na.rm = TRUE)
if(Sum_Shared>0){
#Fruit
#Did a student pick an item for the share table?
Pick_ST_YN_Fr<-ifelse(runif(1)<Pr_Pick_ST_Fr,1,0)
#Fruit picked from Share Table.
if(Pick_ST_YN_Fr==1){
Search.df.fr_ST<-Func_Search_Data(Fr_Data.Frame,Fr_Data.Frame$Location,"Shared",1)
#Fruit from share table selected #
Fr_ST_Picked<-as.numeric(Search.df.fr_ST$Apple.No.)
Fr_Data.Frame[as.numeric(row.names(Search.df.fr_ST)),colnames(Search.df.fr)== "Location"]<-"Tray"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Fruit or from Fruit to Hand.
if(Pick_ST_YN_Fr==1){
#Contamination from picking item share table
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Fr<-ifelse(runif(1)<Pr_eat_ST_Fr,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Fr==1){
if(Eat_YN_ST_Fr==1){
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Consumed")
#Contamination
if (Wrapping_Apples == 1){
#Cross Contamination at consumption if apples wrapped
Func_Cross_Contamination_Fr_Consumption_Wrapped(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} else if (Wrapping_Apples == 0){
#Cross Contamination @ Consumption apples not wrapped.
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
} #end of if wrapp
}else{
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "NotConsumed")
#Cross Crontamination from apples not consumed from ST
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} #end of eat if
} # end of picking if
}  #end of if to make sure there are ST items
#Shared Pss
Items_Shared_Pss<-Pss_Data.Frame$Location == "Shared"
Sum_Shared_Pss<-sum(Items_Shared_Pss, na.rm = TRUE)
if(Sum_Shared_Pss>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pss<-ifelse(runif(1)<Pr_Pick_ST_Pss,1,0)
#Pss picked from Share Table.
if(Pick_ST_YN_Pss==1){
Search.df.Pss_ST<-Func_Search_Data(Pss_Data.Frame,Pss_Data.Frame$Location,"Shared",1)
#Pss from share table selected #
Pss_ST_Picked<-as.numeric(Search.df.Pss_ST$Pss.No.)
Pss_Data.Frame[as.numeric(row.names(Search.df.Pss_ST)),colnames(Search.df.Pss)== "Location"]<-"Tray"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Pss or from Hand to Pss.
if(Pick_ST_YN_Pss==1){
#Contamination at tray
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pss<-ifelse(runif(1)<Pr_eat_ST_Pss,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pss==1){
if(Eat_YN_ST_Pss==1){
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Cross Contamination @ Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Not Consumption
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}
#Shared Pre
Items_Shared_Pre<-Pre_Data.Frame$Location == "Shared"
Sum_Shared_Pre<-sum(Items_Shared_Pre, na.rm = TRUE)
if(Sum_Shared_Pre>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pre<-ifelse(runif(1)<Pr_Pick_ST_Pre,1,0)
#Pre picked from Share Table.
if(Pick_ST_YN_Pre==1){
Search.df.Pre_ST<-Func_Search_Data(Pre_Data.Frame,Pre_Data.Frame$Location,"Shared",1)
#Pre from share table selected #
Pre_ST_Picked<-as.numeric(Search.df.Pre_ST$Pre.No.)
Pre_Data.Frame[as.numeric(row.names(Search.df.Pre_ST)),colnames(Search.df.Pre)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Fruit or from Hand to Fruit.
if(Pick_ST_YN_Pre==1){
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pre<-ifelse(runif(1)<Pr_eat_ST_Pre,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pre==1){
if(Eat_YN_ST_Pre==1){
#Updating Values in DF
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}#end of if there is st items loop
}#end of toggle loop
}  #end of first loop
#Updated items from not consumed, not shared, etc to wasted.
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Shared"]<-"Discarded"
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Shared"]<-"Discarded"
}
#Adding the data to the datalist
datalistFr[[j]]<-Fr_Data.Frame
datalistPss[[j]]<-Pss_Data.Frame
datalistPre[[j]]<-Pre_Data.Frame
source("ST_Outputs_Services.R")
message("Service #", j)
} #end of second loop
#Creation of the Services Data Frames
Fr_Data = do.call(rbind,datalistFr)
Pss_Data = do.call(rbind,datalistPss)
Pre_Data = do.call(rbind,datalistPre)
#Adding Data into the Datalists
datalistFr_days[[k]]<-Fr_Data
datalistPss_days[[k]]<-Pss_Data
datalistPre_days[[k]]<-Pre_Data
source("ST_Output_Days.R")
message("Day #", k)
}#end of day loop k
source("ST_Summary Stats.R")
source("VisualsV5.R")
message("Done Gathering Data", l)
} #end of l loop for iterations.
sapply(AFr_Summary_DF, as.numeric)
Total<-AFr_Summary_DF[1:5]
Total$Type<-"Total"
Selection<-AFr_Summary_DF[c(1,6:9)]
names(Selection)<-c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")
Selection$Type<-"Service Line"
ST<-AFr_Summary_DF[c(1,10:13)]
names(ST)<-c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")
ST$Type<-"Share Table"
Total<-rbind(Total,Selection, ST)
ggplot(Total, aes(x = Iteration.N, y = MedianCont, group = Type)) +
geom_ribbon(aes(ymin = Cont5th, ymax = Cont95th, fill=Type), alpha=0.3 )+
geom_point(aes(x = Iteration.N, y = MedianCont, color = Type))+
geom_line(aes(x= Iteration.N, y= MedianCont,color = Type), size = .5) +
labs(x = "Week #", y = "Contamination Log CFU/g 5th - 95th percentile") +
scale_fill_manual(name = '5th-95th Percentile', values = c("dodgerblue1", "tomato4", "seagreen1"))+
scale_color_manual(name = 'Median', values = c("dodgerblue1", "tomato4", "seagreen1"))+
theme_bw()+
scale_x_continuous(breaks = seq(1, nrow(AFr_Summary_DF), by = 1))
View(Total)
View(AFr_Summary_DF)
View(APre_Summary_DF)
View(APss_Summary_DF)
View(AFr_Summary_DF)
sapply(AFr_Summary_DF, as.numeric)
Total<-AFr_Summary_DF[colnames(AFr_Summary_DF)== c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")]
Func_Append_Column_Final<-function(DF = AFr_Summary_DF, ){
sapply(DF, as.numeric)
Total<-DF[1:5]
Total$Type<-"Total"
Selection<-DF[c(1,6:9)]
names(Selection)<-c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")
Selection$Type<-"Service Line"
ST<-DF[c(1,10:13)]
names(ST)<-c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")
ST$Type<-"Share Table"
Total<-rbind(Total,Selection, ST)
return(Total)
}
Func_Append_Column_Final<-function(DF = AFr_Summary_DF, ){
sapply(DF, as.numeric)
Total<-DF[1:5]
Total$Type<-"Total"
Selection<-DF[c(1,6:9)]
names(Selection)<-c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")
Selection$Type<-"Service Line"
ST<-DF[c(1,10:13)]
names(ST)<-c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")
ST$Type<-"Share Table"
Total<-rbind(Total,Selection, ST)
return(Total)
}
Func_Append_Column_Final<-function(DF = AFr_Summary_DF ){
sapply(DF, as.numeric)
Total<-DF[1:5]
Total$Type<-"Total"
Selection<-DF[c(1,6:9)]
names(Selection)<-c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")
Selection$Type<-"Service Line"
ST<-DF[c(1,10:13)]
names(ST)<-c("Iteration.N", "MeanCont", "MedianCont", "Cont5th", "Cont95th")
ST$Type<-"Share Table"
Total<-rbind(Total,Selection, ST)
return(Total)
}
AFr_Weeks_Append<-Func_Append_Column_Final(AFr_Summary_DF)
View(AFr_Weeks_Append)
AFr_Weeks_Append<-Func_Append_Column_Final(APss)
AFr_Weeks_Append<-Func_Append_Column_Final(APss_Summary_DF)
AFr_Weeks_Append<-Func_Append_Column_Final(APss_Summary_DF)
View(AFr_Weeks_Append)
Ribbon_Function_Final<-function(DF,DF2){
ggplot(DF, aes(x = Iteration.N, y = MedianCont, group = Type)) +
geom_ribbon(aes(ymin = Cont5th, ymax = Cont95th, fill=Type), alpha=0.3 )+
geom_point(aes(x = Iteration.N, y = MedianCont, color = Type))+
geom_line(aes(x= Iteration.N, y= MedianCont,color = Type), size = .5) +
labs(x = "Week #", y = "Contamination Log CFU/g 5th - 95th percentile") +
scale_fill_manual(name = '5th-95th Percentile', values = c("dodgerblue1", "tomato4", "seagreen1"))+
scale_color_manual(name = 'Median', values = c("dodgerblue1", "tomato4", "seagreen1"))+
theme_bw()+
scale_x_continuous(breaks = seq(1, nrow(DF2), by = 1))
}
Ribbon_Function_Final<-function(DF,DF2){
ggplot(DF, aes(x = Iteration.N, y = MedianCont, group = Type)) +
geom_ribbon(aes(ymin = Cont5th, ymax = Cont95th, fill=Type), alpha=0.3 )+
geom_point(aes(x = Iteration.N, y = MedianCont, color = Type))+
geom_line(aes(x= Iteration.N, y= MedianCont,color = Type), size = .5) +
labs(x = "Week #", y = "Contamination Log CFU/g 5th - 95th percentile") +
scale_fill_manual(name = '5th-95th Percentile', values = c("dodgerblue1", "tomato4", "seagreen1"))+
scale_color_manual(name = 'Median', values = c("dodgerblue1", "tomato4", "seagreen1"))+
theme_bw()+
scale_x_continuous(breaks = seq(1, nrow(DF2), by = 1))
}
Ribbon_Function_Final(AFr_Weeks_Append,AFr_Summary_DF)
AFr_Weeks_Append<-Func_Append_Column_Final(AFr_Summary_DF)
APss_Weeks_Append<-Func_Append_Column_Final(APss_Summary_DF)
APre_Weeks_Append<-Func_Append_Column_Final(APre_Summary_DF)
Fruit_Ribbon<-Ribbon_Function_Final(AFr_Weeks_Append,AFr_Summary_DF)
Pss_Ribbon<-Ribbon_Function_Final(APss_Weeks_Append,APss_Summary_DF)
Pre_Ribbon<-Ribbon_Function_Final(APre_Weeks_Append,APre_Summary_DF)
grid.arrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon
ncol(1), nrow(3)
)
grid.arrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol(1), nrow(3)
)
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol(1), nrow(3)
)
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol(3), nrow(1)
)
?ggarrange
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol(3), nrow(1)
)
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol(1), nrow(3)
)
?ggarrange
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol=1, nrow=3
)
?ggarrange
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol=1, nrow=3, label.x = "Weeks", label.y ="Contamination Log CFU/g 5th - 95th percentile"
)
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol=1, nrow=3, label.x = 0, label.y =0
)
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol=1, nrow=3, label.x = "Weeks", label.y ="Contamination Log CFU/g 5th - 95th percentile"
)
Ribbon_Function_Final<-function(DF,DF2, Title){
ggplot(DF, aes(x = Iteration.N, y = MedianCont, group = Type)) +
geom_ribbon(aes(ymin = Cont5th, ymax = Cont95th, fill=Type), alpha=0.3 )+
geom_point(aes(x = Iteration.N, y = MedianCont, color = Type))+
geom_line(aes(x= Iteration.N, y= MedianCont,color = Type), size = .5) +
labs(x = "Week #", y = "Contamination Log CFU/g 5th - 95th percentile") +
scale_fill_manual(name = '5th-95th Percentile', values = c("dodgerblue1", "tomato4", "seagreen1"))+
scale_color_manual(name = 'Median', values = c("dodgerblue1", "tomato4", "seagreen1"))+
theme_bw()+
ggtitle(Title)+
scale_x_continuous(breaks = seq(1, nrow(DF2), by = 1))
}
AFr_Weeks_Append<-Func_Append_Column_Final(AFr_Summary_DF)
APss_Weeks_Append<-Func_Append_Column_Final(APss_Summary_DF)
APre_Weeks_Append<-Func_Append_Column_Final(APre_Summary_DF)
Fruit_Ribbon<-Ribbon_Function_Final(AFr_Weeks_Append,AFr_Summary_DF, "Fruit")
Pss_Ribbon<-Ribbon_Function_Final(APss_Weeks_Append,APss_Summary_DF, "Pss")
Pre_Ribbon<-Ribbon_Function_Final(APre_Weeks_Append,APre_Summary_DF, "Pre")
ggarrange(Fruit_Ribbon,Pss_Ribbon, Pre_Ribbon,
ncol=1, nrow=3, label.x = "Weeks", label.y ="Contamination Log CFU/g 5th - 95th percentile"
)
