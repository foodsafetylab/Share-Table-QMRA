} #end of eat if
} # end of picking if
}  #end of if to make sure there are ST items
#Shared Pss
Items_Shared_Pss<-Pss_Data.Frame$Location == "Shared"
Sum_Shared_Pss<-sum(Items_Shared_Pss, na.rm = TRUE)
if(Sum_Shared_Pss>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pss<-ifelse(runif(1)<Pr_Pick_ST_Pss,1,0)
#Pss picked from Share Table.
if(Pick_ST_YN_Pss==1){
Search.df.Pss_ST<-Func_Search_Data(Pss_Data.Frame,Pss_Data.Frame$Location,"Shared",1)
#Pss from share table selected #
Pss_ST_Picked<-as.numeric(Search.df.Pss_ST$Pss.No.)
Pss_Data.Frame[as.numeric(row.names(Search.df.Pss_ST)),colnames(Search.df.Pss)== "Location"]<-"Tray"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Pss or from Hand to Pss.
if(Pick_ST_YN_Pss==1){
#Contamination at tray
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pss<-ifelse(runif(1)<Pr_eat_ST_Pss,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pss==1){
if(Eat_YN_ST_Pss==1){
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Cross Contamination @ Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Not Consumption
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}
#Shared Pre
Items_Shared_Pre<-Pre_Data.Frame$Location == "Shared"
Sum_Shared_Pre<-sum(Items_Shared_Pre, na.rm = TRUE)
if(Sum_Shared_Pre>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pre<-ifelse(runif(1)<Pr_Pick_ST_Pre,1,0)
#Pre picked from Share Table.
if(Pick_ST_YN_Pre==1){
Search.df.Pre_ST<-Func_Search_Data(Pre_Data.Frame,Pre_Data.Frame$Location,"Shared",1)
#Pre from share table selected #
Pre_ST_Picked<-as.numeric(Search.df.Pre_ST$Pre.No.)
Pre_Data.Frame[as.numeric(row.names(Search.df.Pre_ST)),colnames(Search.df.Pre)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Fruit or from Hand to Fruit.
if(Pick_ST_YN_Pre==1){
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pre<-ifelse(runif(1)<Pr_eat_ST_Pre,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pre==1){
if(Eat_YN_ST_Pre==1){
#Updating Values in DF
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}#end of if there is st items loop
}#end of toggle loop
}  #end of first loop
#Updated items from not consumed, not shared, etc to wasted.
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Shared"]<-"Discarded"
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Shared"]<-"Discarded"
}
#Adding Services
Fr_Data.Frame<-func_Add_Services(Fr_Data.Frame)
Pss_Data.Frame<-func_Add_Services(Pss_Data.Frame)
Pre_Data.Frame<-func_Add_Services(Pre_Data.Frame)
#Adding the data to the datalist
datalistFr[[j]]<-Fr_Data.Frame
datalistPss[[j]]<-Pss_Data.Frame
datalistPre[[j]]<-Pre_Data.Frame
List_Sens_Fr[[paste(l,k,j)]]<-Fr_Data.Frame
List_Sens_Pss[[paste(l,k,j)]]<-Pss_Data.Frame
List_Sens_Pre[[paste(l,k,j)]]<-Pre_Data.Frame
source("Output_Services.R")
message("Service #", j)
} #end of second loop
#Creation of the Services Data Frames
Fr_Data = do.call(rbind,datalistFr)
Pss_Data = do.call(rbind,datalistPss)
Pre_Data = do.call(rbind,datalistPre)
#Adding Data into the Datalists
datalistFr_days[[k]]<-Fr_Data
datalistPss_days[[k]]<-Pss_Data
datalistPre_days[[k]]<-Pre_Data
source("Output_Days.R")
message("Day #", k)
}#end of day loop k
source("Output_SummaryStats.R")
source("Output_Visuals.R")
message("Done Gathering Data", l)
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
} #end of l loop for iterations.
#Start from here
OD<-bind_rows(List_Sens_Fr)
#find the dupplicated
OD1<-OD %>%
group_by(ID) %>%
filter(n()>1)
#remove duplicated by leaving the one that was in the system the longest.
OD2<-OD%>%
group_by(ID)%>%
filter(TotServices==max(TotServices))
#Consumed
OD2<-OD%>%
group_by(ID)%>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")
Vector12<-c()
for (i in 1:nrow(OD2)){
if (OD2[i,colnames(OD2)=="STtimes"]>0){
Vector12<-c(Vector12,1)
}else if(OD2[i,colnames(OD2)=="STtimes"]==0){
Vector12<-c(Vector12,0)
}
}
Touches_Number<-lengths(regmatches(OD2$History, gregexpr("Touched", OD2$History)))
Analysis_Consumed<-data.frame(
"Contamination" = OD2$Contamination,
"DeltaCont"= (OD2$Contamination-OD2$InContamination),
"InContamination"=OD2$InContamination,
"TouchesNo"=Touches_Number,
"STTimes"= OD2$STtimes,
"TotServices"=OD2$TotServices,
"Shared"=Vector12
)
Analysis_Prcc<-data.frame(
"DeltaCont"= (OD2$Contamination-OD2$InContamination),
"InContamination"=OD2$InContamination,
"TouchesNo"=Touches_Number,
"STTimes"= OD2$STtimes,
"TotServices"=OD2$TotServices,
"Shared"=Vector12,
"Contamination" = OD2$Contamination
)
Analysis_Prcc<-Func_Convert_Log(Analysis_Prcc,Column = "InContamination")
#Running Partical correlation coefficients
Pcc1<-pcc(X=Input_DataFrame_Services_Fr[,2:12], y=Input_DataFrame_Services_Fr$OutputContsFr,conf = 0.95,nboot = 1000,rank = TRUE)
Cont_per_Service_Func<-function(vector){
vector<-vector[which(vector$Location == "Consumed"),]
mean(vector$Contamination)
}
Cont_per_Service_Med_Func<-function(vector){
vector<-vector[which(vector$Location == "Consumed"),]
median(vector$Contamination)
}
Median_Con_Services_Fr<-sapply(X=List_Sens_Fr,FUN=Cont_per_Service_Med_Func)
#Creating Vector of Contaminations for Items consumed
Mean_Con_Services_Fr<-sapply(X=List_Sens_Fr,FUN=Cont_per_Service_Func)
Mean_Con_Services_Pss<-sapply(X=List_Sens_Pss, FUN = Cont_per_Service_Func)
Mean_Con_Services_Pre<-sapply(X=List_Sens_Pre, FUN= Cont_per_Service_Func)
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
Input_DataFrame_Services_Pss<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationPss"=Vector_Cont_Pss_Serv_Out,
"No_Cont_Pss"=Vector_No_Cont_Pss,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsPss"=Mean_Con_Services_Pss,
stringsAsFactors = FALSE
)
Input_DataFrame_Services_Pre<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationPre"=Vector_Cont_Pre_Serv_Out,
"No_Cont_Pss"=Vector_No_Cont_Pre,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsPre"=Mean_Con_Services_Pre,
stringsAsFactors = FALSE
)
#Making NA Values 0
Input_DataFrame_Services_Fr[is.na(Input_DataFrame_Services_Fr)]<-0
Input_DataFrame_Services_Pss[is.na(Input_DataFrame_Services_Pss)]<-0
Input_DataFrame_Services_Pre[is.na(Input_DataFrame_Services_Pre)]<-0
#Running Partical correlation coefficients
Pcc1<-pcc(X=Input_DataFrame_Services_Fr[,2:12], y=Input_DataFrame_Services_Fr$OutputContsFr,conf = 0.95,nboot = 1000,rank = TRUE)
#p.adjust(p = Pcc1,method = "bonferroni")
#PccFr$PCC$Bonferroni<-p.adjust(PccFr$PCC$original, method = "bonferroni")
Pcc1
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
View(Input_DataFrame_Services_Fr)
#Creating Prevalence of contaminated Students
Vector_Prevalence_Cont_Stu<-c()#Vector for prevalence of contaminated students every service.
#Creating Prevalence of contaminated Students
Vector_Prevalence_Cont_Stu<-c()#Vector for prevalence of contaminated students every service.
for ( i in 1:length(Vector_No_Cont_Stu)){
Vector_Prevalence_Cont_Stu<-c(Vector_Prevalence_Cont_Stu,Vector_No_Cont_Stu[i]/(Students_p_grade))
}
Vector_Prevalence_Cont_Stu
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"PrevalenceStudentCont"= Vector_Prevalence_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
#Running Partical correlation coefficients
Pcc1<-pcc(X=Input_DataFrame_Services_Fr[,2:13], y=Input_DataFrame_Services_Fr$OutputContsFr,conf = 0.95,nboot = 1000,rank = TRUE)
#p.adjust(p = Pcc1,method = "bonferroni")
#PccFr$PCC$Bonferroni<-p.adjust(PccFr$PCC$original, method = "bonferroni")
Pcc1
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"PrevalenceStudentCont"= Vector_Prevalence_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"PrevalenceStudentCont"= Vector_Prevalence_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
View(Input_DataFrame_Services_Fr)
Touches_per_Service_Med_Func<-function(vector){
vector<-lengths(regmatches(vector$History, gregexpr("Touched", vector$History)))
mean(vector$Contamination)
}
VEctor13<-sapply(X=List_Sens_Fr, FUN = Touches_per_Service_Med_Func)
Q
Touches_per_Service_Med_Func<-function(vector){
vector<-lengths(regmatches(vector$History, gregexpr("Touched", vector$History)))
return(vector)
}
VEctor13<-sapply(X=List_Sens_Fr, FUN = Touches_per_Service_Med_Func)
View(VEctor13)
Touches_per_Service_Med_Func<-function(vector){
vector<-lengths(regmatches(vector$History, gregexpr("Touched", vector$History)))
mean(vector)
}
VEctor13<-sapply(X=List_Sens_Fr, FUN = Touches_per_Service_Med_Func)
#Average Touches per service
Touches_per_service<-sapply(X=List_Sens_Fr, FUN = Touches_per_Service_Med_Func)
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"PrevalenceStudentCont"= Vector_Prevalence_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"Touches/service"=Touches_per_service,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
pcc(X=Input_DataFrame_Services_Pre[,2:14], y=Input_DataFrame_Services_Pre$OutputContsPre)
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"PrevalenceStudentCont"= Vector_Prevalence_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"Touches/service"=Touches_per_service,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
#Running Partical correlation coefficients
Pcc1<-pcc(X=Input_DataFrame_Services_Fr[,2:13], y=Input_DataFrame_Services_Fr$OutputContsFr,conf = 0.95,nboot = 1000,rank = TRUE)
#p.adjust(p = Pcc1,method = "bonferroni")
#PccFr$PCC$Bonferroni<-p.adjust(PccFr$PCC$original, method = "bonferroni")
Pcc1
#p.adjust(p = Pcc1,method = "bonferroni")
#PccFr$PCC$Bonferroni<-p.adjust(PccFr$PCC$original, method = "bonferroni")
Pcc1
plot(Pcc1)
Pcc1$PRCC
ggplot(data = Pcc1$PRCC, aes(x=original ))+
geom_bar()
ggplot(data = Pcc1$PRCC, aes(x=original ))+
geom_histogram()
View(Pcc1$PRCC)
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_bar()
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_histogram()
rownames(Pcc1$PRCC)
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
coord_flip()
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"Initial_Student_Cont" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"Prevalence_Student_Cont"= Vector_Prevalence_Cont_Stu,
"Initial_Fr_Cont"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"Mean_Touches_per_service"=Touches_per_service,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
#Running Partical correlation coefficients
Pcc1<-pcc(X=Input_DataFrame_Services_Fr[,2:13], y=Input_DataFrame_Services_Fr$OutputContsFr,conf = 0.95,nboot = 1000,rank = TRUE)
warnings()
plot(Pcc1)
#p.adjust(p = Pcc1,method = "bonferroni")
#PccFr$PCC$Bonferroni<-p.adjust(PccFr$PCC$original, method = "bonferroni")
Pcc1
View(Pcc1$PRCC)
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
coord_flip()
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=original+min.c.i., ymax=original+mac.c.i.), width=.1)
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=original+1, ymax=original+2), width=.1)
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=original+1, ymax=original+2), width=.1)
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=original+1, ymax=original+2), width=.1)+
geom_bar(stat = "identity", position = "identity")+
coord_flip()
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=original-min.c.i., ymax=original+max.c.i.), width=.1)+
geom_bar(stat = "identity", position = "identity")+
coord_flip()
names(Pcc1$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=original-minci., ymax=original+maxci), width=.1)+
geom_bar(stat = "identity", position = "identity")+
coord_flip()
Pcc1$PRCC
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=original-minci, ymax=original+maxci), width=.1)+
geom_bar(stat = "identity", position = "identity")+
coord_flip()
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1)+
geom_bar(stat = "identity", position = "identity")+
coord_flip()
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
geom_bar(stat = "identity", position = "identity")+
coord_flip()
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
coord_flip()
#Running Partical correlation coefficients
Pcc1<-pcc(X=Input_DataFrame_Services_Fr[,2:13], y=Input_DataFrame_Services_Fr$OutputContsFr,conf = 0.95,nboot = 10000,rank = TRUE)
names(Pcc1$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
coord_flip()
ggplot(data = Pcc1$PRCC, aes(x=rownames(Pcc1$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
coord_flip()
