Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "Consumed")
#Contamination
if (Wrapping_Apples == 1){
#Cross Contamination at consumption if apples wrapped
Func_Cross_Contamination_Fr_Consumption_Wrapped(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_Picked) #Adding Allergen Contamination from touch.
} else if (Wrapping_Apples == 0){
#Cross Contamination @ Consumption apples not wrapped.
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
} #end of if wrapp
}else{
#Updating Location and History for consumption
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Consumed"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "NotConsumed")
#Cross Crontamination from apples not being Consumed touch to ST/ Trash
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_Picked) #Adding Allergen Contamination from touch.
} #end of eat if statement
}#end of pick statement
#Pss
#Did student consume the Pss
Eat_YN_Pss<-ifelse(runif(1)<Pr_eat_Pss,1,0)
#Changing Data Frame for consumption of Pss
if(Pick_YN_Pss==1){
if(Eat_YN_Pss==1){
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Contamination Insdide Pss @Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Picked) #Adding Allergen Contamination from touch.
}else{
#Updating Data frame Location and History
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Consumption
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Picked) #Adding Allergen Contamination from touch.
} #end of Else statement for Eat
} #end of If
#Pre
#Did student consume the Pre
Eat_YN_Pre<-ifelse(runif(1)<Pr_eat_Pre,1,0)
#Changind Data Frame for consumption of Pre
if(Pick_YN_Pre==1){
if(Eat_YN_Pre==1){
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Picked) #Adding Allergen Contamination from touch.
}
}
#Not Consumed items to share table=======================================================
if(Share_Table_YN==1){
#Proability of the student sharing their food.
Share_YN_Food<-ifelse(runif(1)<Pr_share_Food,1,0)
#Fruit
#Items in Share Table:
if(Pick_YN_Fr==1){
if(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Shared"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "Shared")
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="STtimes"]<-Func_Index_DF(Fr_Data.Frame,Fr_Picked,"STtimes")+1
V_Shared_Fr<-(V_Shared_Fr+1)
}else{
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Shared"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "NotShared")
}
}
}
#Pss
if(Pick_YN_Pss==1){
if(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Shared"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Shared")
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="STtimes"]<-Func_Index_DF(Pss_Data.Frame,Pss_Picked,"STtimes")+1
V_Shared_Pss<-(V_Shared_Pss+1)
}else{
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Shared"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "NotShared")
}
}
}
#Pre
if(Pick_YN_Pre==1){
if(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Shared")
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="STtimes"]<-Func_Index_DF(Pre_Data.Frame,Pre_Picked,"STtimes")+1
V_Shared_Pre<-(V_Shared_Pre+1)
}else{
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-" Not Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "NotShared")
}
}
}
#Picking and consuming ST items ==================================================================
#Shared Fruit
Items_Shared<-Fr_Data.Frame$Location == "Shared"
Sum_Shared<-sum(Items_Shared, na.rm = TRUE)
if(Sum_Shared>0){
#Fruit
#Did a student pick an item for the share table?
Pick_ST_YN_Fr<-ifelse(runif(1)<Pr_Pick_ST_Fr,1,0)
#Fruit picked from Share Table.
if(Pick_ST_YN_Fr==1){
Search.df.fr_ST<-Func_Search_Data(Fr_Data.Frame,Fr_Data.Frame$Location,"Shared",1)
#Fruit from share table selected #
Fr_ST_Picked<-as.numeric(Search.df.fr_ST$Apple.No.)
Fr_Data.Frame[as.numeric(row.names(Search.df.fr_ST)),colnames(Search.df.fr)== "Location"]<-"Tray"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Fruit or from Fruit to Hand.
if(Pick_ST_YN_Fr==1){
#Contamination from picking item share table
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Fr<-ifelse(runif(1)<Pr_eat_ST_Fr,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Fr==1){
if(Eat_YN_ST_Fr==1){
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Consumed")
#Contamination
if (Wrapping_Apples == 1){
#Cross Contamination at consumption if apples wrapped
Func_Cross_Contamination_Fr_Consumption_Wrapped(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} else if (Wrapping_Apples == 0){
#Cross Contamination @ Consumption apples not wrapped.
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
} #end of if wrapp
}else{
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "NotConsumed")
#Cross Crontamination from apples not consumed from ST
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} #end of eat if
} # end of picking if
}  #end of if to make sure there are ST items
#Shared Pss
Items_Shared_Pss<-Pss_Data.Frame$Location == "Shared"
Sum_Shared_Pss<-sum(Items_Shared_Pss, na.rm = TRUE)
if(Sum_Shared_Pss>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pss<-ifelse(runif(1)<Pr_Pick_ST_Pss,1,0)
#Pss picked from Share Table.
if(Pick_ST_YN_Pss==1){
Search.df.Pss_ST<-Func_Search_Data(Pss_Data.Frame,Pss_Data.Frame$Location,"Shared",1)
#Pss from share table selected #
Pss_ST_Picked<-as.numeric(Search.df.Pss_ST$Pss.No.)
Pss_Data.Frame[as.numeric(row.names(Search.df.Pss_ST)),colnames(Search.df.Pss)== "Location"]<-"Tray"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Pss or from Hand to Pss.
if(Pick_ST_YN_Pss==1){
#Contamination at tray
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pss<-ifelse(runif(1)<Pr_eat_ST_Pss,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pss==1){
if(Eat_YN_ST_Pss==1){
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Cross Contamination @ Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Not Consumption
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}
#Shared Pre
Items_Shared_Pre<-Pre_Data.Frame$Location == "Shared"
Sum_Shared_Pre<-sum(Items_Shared_Pre, na.rm = TRUE)
if(Sum_Shared_Pre>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pre<-ifelse(runif(1)<Pr_Pick_ST_Pre,1,0)
#Pre picked from Share Table.
if(Pick_ST_YN_Pre==1){
Search.df.Pre_ST<-Func_Search_Data(Pre_Data.Frame,Pre_Data.Frame$Location,"Shared",1)
#Pre from share table selected #
Pre_ST_Picked<-as.numeric(Search.df.Pre_ST$Pre.No.)
Pre_Data.Frame[as.numeric(row.names(Search.df.Pre_ST)),colnames(Search.df.Pre)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Fruit or from Hand to Fruit.
if(Pick_ST_YN_Pre==1){
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pre<-ifelse(runif(1)<Pr_eat_ST_Pre,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pre==1){
if(Eat_YN_ST_Pre==1){
#Updating Values in DF
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}#end of if there is st items loop
}#end of toggle loop
}  #end of first loop
#Updated items from not consumed, not shared, etc to wasted.
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Shared"]<-"Discarded"
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Shared"]<-"Discarded"
}
#Adding the data to the datalist
datalistFr[[j]]<-Fr_Data.Frame
datalistPss[[j]]<-Pss_Data.Frame
datalistPre[[j]]<-Pre_Data.Frame
List_Sens_Fr[[paste(l,k,j)]]<-Fr_Data.Frame
List_Sens_Pss[[paste(l,k,j)]]<-Pss_Data.Frame
List_Sens_Pre[[paste(l,k,j)]]<-Pre_Data.Frame
source("Output_Services.R")
message("Service #", j)
} #end of second loop
#Creation of the Services Data Frames
Fr_Data = do.call(rbind,datalistFr)
Pss_Data = do.call(rbind,datalistPss)
Pre_Data = do.call(rbind,datalistPre)
#Adding Data into the Datalists
datalistFr_days[[k]]<-Fr_Data
datalistPss_days[[k]]<-Pss_Data
datalistPre_days[[k]]<-Pre_Data
source("Output_Days.R")
message("Day #", k)
}#end of day loop k
source("Output_SummaryStats.R")
source("Output_Visuals.R")
message("Done Gathering Data", l)
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
} #end of l loop for iterations.
View(datalistFr_days)
Cont_per_Service_Func(datalistFr_days)
Cont_per_Service_Func<-function(vector){
vector<-vector[which(vector$Location == "Consumed"),]
mean(vector$Contamination)
}
Cont_per_Service_Func(datalistFr_days)
sapply(X = datalistFr_days, FUN = Cont_per_Service_Func)
1<-sapply(X = datalistFr_days, FUN = Cont_per_Service_Func)
Trial2<-sapply(X = datalistFr_days, FUN = Cont_per_Service_Func)
Vector_Con_Services
Sensitivy<-data.frame(
"IC_Student"= as.numeric(0),
"Contamination"=as.numeric(0),
"Contamination"=as.numeric(0),
"Contamination"=as.numeric(0),
"Contamination"=as.numeric(0),
"NoContaminated"=as.numeric(0),
"PrevalenceCont"=as.numeric(0),
)
set.seed(1)
rnorm(1,4,3)
rnorm(1,4,3)
set.seed(1)
rnorm(1,4,3)
Cont_per_Service_Func<-function(vector){
vector<-vector[which(vector$Location == "Consumed"),]
mean(vector$Contamination)
}
Cont_per_Service_Med_Func<-function(vector){
vector<-vector[which(vector$Location == "Consumed"),]
median(vector$Contamination)
}
Median_Con_Services_Fr<-sapply(X=List_Sens_Fr,FUN=Cont_per_Service_Med_Func)
#Creating Vector of Contaminations for Items consumed
Mean_Con_Services_Fr<-sapply(X=List_Sens_Fr,FUN=Cont_per_Service_Func)
Mean_Con_Services_Pss<-sapply(X=List_Sens_Pss, FUN = Cont_per_Service_Func)
Mean_Con_Services_Pre<-sapply(X=List_Sens_Pre, FUN= Cont_per_Service_Func)
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
stringsAsFactors = FALSE
)
Input_DataFrame_Services_Pss<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationPss"=Vector_Cont_Pss_Serv_Out,
"No_Cont_Pss"=Vector_No_Cont_Pss,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsPss"=Mean_Con_Services_Pss,
stringsAsFactors = FALSE
)
Input_DataFrame_Services_Pre<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationPre"=Vector_Cont_Pre_Serv_Out,
"No_Cont_Pss"=Vector_No_Cont_Pre,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsPre"=Mean_Con_Services_Pre,
stringsAsFactors = FALSE
)
#Making NA Values 0
Input_DataFrame_Services_Fr[is.na(Input_DataFrame_Services_Fr)]<-0
Input_DataFrame_Services_Pss[is.na(Input_DataFrame_Services_Pss)]<-0
Input_DataFrame_Services_Pre[is.na(Input_DataFrame_Services_Pre)]<-0
#Running Partical correlation coefficients
pcc(X=Input_DataFrame_Services_Fr[,2:12], y=Input_DataFrame_Services_Fr$OutputContsFr)
ggplot(data =d , aes(OutputContsFr,value, col=variable)) +
scale_x_log10()+
scale_y_log10(c("ContaminationFr","ContaminationStu"))+
geom_point() +
stat_smooth() +
facet_wrap(~variable, scales = "free")+
xlab("Contamination Items Consumed Log CFU/Fruit")+
ylab("Values")
d <- melt(Input_DataFrame_Services_Fr, id.vars="OutputContsFr")
ggplot(data =d , aes(OutputContsFr,value, col=variable)) +
scale_x_log10()+
scale_y_log10(c("ContaminationFr","ContaminationStu"))+
geom_point() +
stat_smooth() +
facet_wrap(~variable, scales = "free")+
xlab("Contamination Items Consumed Log CFU/Fruit")+
ylab("Values")
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
stringsAsFactors = FALSE
)
View(Input_DataFrame_Services_Fr)
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0"
stringsAsFactors = FALSE
)
Input_DataFrame_Services_Fr<-data.frame(
"Service"= 1:(Service_No*Food_Days*Sens_Iterations),
"ContaminationStu" = Vector_Con_Services,
"No_Cont_Students" = Vector_No_Cont_Stu,
"ContaminationFr"=Vector_Cont_Fr_Serv_Out,
"No_Cont_Fr"=Vector_No_Cont_Fr,
"TE_H_F"=Vector_TE_H_F,
"TE_F_H"=Vector_TE_F_H,
"TE_H_S"=Vector_TE_H_S,
"TE_S_H"=Vector_TE_S_H,
"TE_S_F"=Vector_TE_S_F,
"TE_F_S"=Vector_TE_F_S,
"TE_Pre_Mouth"=TE_Pre_Mouth,
"OutputContsFr"=Mean_Con_Services_Fr,
"OutputContMedFr"=Median_Con_Services_Fr,
"RatingContFr" = "0",
stringsAsFactors = FALSE
)
for (i in nrow(Input_DataFrame_Services_Fr)){
a<-Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="ContaminationStu"]
if (a<10){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Low"
} else if (a>1000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Med"
}else if (a>10000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Med"
}
}
for (i in nrow(Input_DataFrame_Services_Fr)){
a<-Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="ContaminationStu"]
if (a<10){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Low"
} else if (a>10 && a<1000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Med"
}else if (a>1000 && a<10000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"MedHigh"
}else if (a>10000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"High"
}
}
View(Input_DataFrame_Services_Fr)
a<-Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="ContaminationStu"]
if (a<10){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Low"
} else if (a>10 && a<1000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Med"
}else if (a>1000 && a<10000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"MedHigh"
}else if (a>10000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"High"
}
for (i in 1:nrow(Input_DataFrame_Services_Fr)){
a<-Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="ContaminationStu"]
if (a<10){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Low"
} else if (a>10 && a<1000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"Med"
}else if (a>1000 && a<10000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"MedHigh"
}else if (a>10000){
Input_DataFrame_Services_Fr[i,colnames(Input_DataFrame_Services_Fr)=="RatingContFr"]<-"High"
}
}
ggplot(data = Input_DataFrame_Services_Fr , aes(x=OutputContsFr, y = ContaminationFr, col=RatinContFr )) +
scale_x_log10()+
scale_y_log10()+
geom_point()+
geom_smooth()
ggplot(data = Input_DataFrame_Services_Fr , aes(x=OutputContsFr, y = ContaminationFr, col=RatingContFr )) +
scale_x_log10()+
scale_y_log10()+
geom_point()+
geom_smooth()
ggplot(data = Input_DataFrame_Services_Fr , aes(x=OutputContsFr, y = ContaminationFr )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=RatingContFr))+
geom_smooth()
