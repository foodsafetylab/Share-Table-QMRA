}
#Pre
if(Pick_YN_Pre==1){
if(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Shared")
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="STtimes"]<-Func_Index_DF(Pre_Data.Frame,Pre_Picked,"STtimes")+1
V_Shared_Pre<-(V_Shared_Pre+1)
}else{
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-" Not Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "NotShared")
}
}
}
#Picking and consuming ST items ==================================================================
#Shared Fruit
Items_Shared<-Fr_Data.Frame$Location == "Shared"
Sum_Shared<-sum(Items_Shared, na.rm = TRUE)
if(Sum_Shared>0){
#Fruit
#Did a student pick an item for the share table?
Pick_ST_YN_Fr<-ifelse(runif(1)<Pr_Pick_ST_Fr,1,0)
#Fruit picked from Share Table.
if(Pick_ST_YN_Fr==1){
Search.df.fr_ST<-Func_Search_Data(Fr_Data.Frame,Fr_Data.Frame$Location,"Shared",1)
#Fruit from share table selected #
Fr_ST_Picked<-as.numeric(Search.df.fr_ST$Item.No.)
Fr_Data.Frame[as.numeric(row.names(Search.df.fr_ST)),colnames(Search.df.fr)== "Location"]<-"Tray"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Tray")
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Touched")
}
#Contamination from Hand to Fruit or from Fruit to Hand.
if(Pick_ST_YN_Fr==1){
#Contamination from picking item share table
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Fr_Data.Frame, Item_Picked= Fr_ST_Picked, Item="Fruit")
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Fr<-ifelse(runif(1)<Pr_eat_ST_Fr,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Fr==1){
if(Eat_YN_ST_Fr==1){
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "ConsumedBy"]<-(paste(l,k,j,z))
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Consumed")
#Contamination
if (Wrapping_Apples == 1){
#Cross Contamination at consumption if apples wrapped
Func_Cross_Contamination_Consumption_Wrapped(Cont_Student = Cont_Student,Data.Frame = Fr_Data.Frame,Item_Picked = Fr_ST_Picked ,Item = "Fruit")
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} else if (Wrapping_Apples == 0){
#Cross Contamination @ Consumption apples not wrapped.
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Fr_Data.Frame, Item_Picked= Fr_ST_Picked, Item="Fruit")
} #end of if wrapp
}else{
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "NotConsumed")
#Cross Crontamination from apples not consumed from ST
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Fr_Data.Frame, Item_Picked= Fr_ST_Picked, Item="Fruit")
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} #end of eat if
} # end of picking if
}  #end of if to make sure there are ST items
#Shared Pss
Items_Shared_Pss<-Pss_Data.Frame$Location == "Shared"
Sum_Shared_Pss<-sum(Items_Shared_Pss, na.rm = TRUE)
if(Sum_Shared_Pss>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pss<-ifelse(runif(1)<Pr_Pick_ST_Pss,1,0)
#Pss picked from Share Table.
if(Pick_ST_YN_Pss==1){
Search.df.Pss_ST<-Func_Search_Data(Pss_Data.Frame,Pss_Data.Frame$Location,"Shared",1)
#Pss from share table selected #
Pss_ST_Picked<-as.numeric(Search.df.Pss_ST$Item.No.)
Pss_Data.Frame[as.numeric(row.names(Search.df.Pss_ST)),colnames(Search.df.Pss)== "Location"]<-"Tray"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Tray")
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Touched")
}
#Contamination from Hand to Pss or from Hand to Pss.
if(Pick_ST_YN_Pss==1){
#Contamination at tray
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Pss_Data.Frame, Item_Picked= Pss_ST_Picked, Item="PSS")
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pss<-ifelse(runif(1)<Pr_eat_ST_Pss,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pss==1){
if(Eat_YN_ST_Pss==1){
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "ConsumedBy"]<-(paste(l,k,j,z))
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Cross Contamination @ Consumption
Func_Cross_Contamination_Consumption_Wrapped(Cont_Student = Cont_Student,Data.Frame = Pss_Data.Frame,Item_Picked = Pss_ST_Picked,Item = "PSS")
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Not Consumption
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Pss_Data.Frame, Item_Picked= Pss_ST_Picked, Item="PSS")
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}
#Shared Pre
Items_Shared_Pre<-Pre_Data.Frame$Location == "Shared"
Sum_Shared_Pre<-sum(Items_Shared_Pre, na.rm = TRUE)
if(Sum_Shared_Pre>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pre<-ifelse(runif(1)<Pr_Pick_ST_Pre,1,0)
#Pre picked from Share Table.
if(Pick_ST_YN_Pre==1){
Search.df.Pre_ST<-Func_Search_Data(Pre_Data.Frame,Pre_Data.Frame$Location,"Shared",1)
#Pre from share table selected #
Pre_ST_Picked<-as.numeric(Search.df.Pre_ST$Item.No.)
Pre_Data.Frame[as.numeric(row.names(Search.df.Pre_ST)),colnames(Search.df.Pre)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Touched")
}
#Contamination from Hand to Fruit or from Hand to Fruit.
if(Pick_ST_YN_Pre==1){
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Pre_Data.Frame, Item_Picked= Pre_ST_Picked, Item="PRE")
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pre<-ifelse(runif(1)<Pr_eat_ST_Pre,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pre==1){
if(Eat_YN_ST_Pre==1){
#Updating Values in DF
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "ConsumedBy"]<-(paste(l,k,j,z))
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination(Cont_Student=Cont_Student,Data.Frame=Pre_Data.Frame, Item_Picked= Pre_ST_Picked, Item="PRE")
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}#end of if there is st items loop
}#end of toggle loop
}  #end of first loop
#Updated items from not consumed, not shared, etc to wasted.
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Shared"]<-"Discarded"
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Shared"]<-"Discarded"
}
#Adding Services
Fr_Data.Frame<-func_Add_Services(Fr_Data.Frame)
Pss_Data.Frame<-func_Add_Services(Pss_Data.Frame)
Pre_Data.Frame<-func_Add_Services(Pre_Data.Frame)
#Adding the data to the datalist
datalistFr[[j]]<-Fr_Data.Frame
datalistPss[[j]]<-Pss_Data.Frame
datalistPre[[j]]<-Pre_Data.Frame
source("Output_Services.R")
List_Sens_Fr[[paste(l,k,j)]]<-Fr_Data.Frame
List_Sens_Pss[[paste(l,k,j)]]<-Pss_Data.Frame
List_Sens_Pre[[paste(l,k,j)]]<-Pre_Data.Frame
message("Service #", j)
} #end of second loop
#Creation of the Services Data Frames
Fr_Data = do.call(rbind,datalistFr)
Pss_Data = do.call(rbind,datalistPss)
Pre_Data = do.call(rbind,datalistPre)
#Adding Data into the Datalists
datalistFr_days[[k]]<-Fr_Data
datalistPss_days[[k]]<-Pss_Data
datalistPre_days[[k]]<-Pre_Data
source("Output_Days.R")
message("Day #", k)
}#end of day loop k
source("Summary_WeekSens.R")
#source("Summary_WeeksDR.R")
message("Done Gathering Data", l)
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
}
replicate(3,func_Iterations())
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
traceback()
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
#Function to extract list into a Data Frame
Func_List2DF<-function(list){
df<-data.frame(matrix(unlist(list), nrow=length(list), byrow=T),stringsAsFactors=FALSE)
return(df)
}
lista<-replicate(5,Func_Rep_DR(DF_DR_Analysis),simplify = FALSE )
DF_DR_Rep<-Func_List2DF(lista)
#Analysis For weekly Dose Response
Reps_DR<-100
List_week_DR<-split(x=DF_DR_Analysis,f=DF_DR_Analysis$week)
lista<-replicate(Reps_DR,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
list_Df_Rep<-lapply(lista, Func_List2DF)
list_Df_Rep<-lapply(list_Df_Rep, setNames, c("Infections", "Illness"))
list_Df_Rep<-lapply(list_Df_Rep,bind_rows)
list_Df_Rep<-bind_cols(list_Df_Rep)
df_inf_Week = list_Df_Rep[,seq(1, ncol(list_Df_Rep), 2) ]
df_ill_Week = list_Df_Rep[,seq(2, ncol(list_Df_Rep), 2) ]
df_inf_Week<-as.data.frame(t(df_inf_Week))
df_ill_Week<-as.data.frame(t(df_ill_Week))
rownames(df_inf_Week)<-paste("Rep",1:Reps_DR)
rownames(df_ill_Week)<-paste("Rep",1:Reps_DR)
colnames(df_inf_Week)<-paste("Week",1:Sens_Iterations)
colnames(df_ill_Week)<-paste("Week",1:Sens_Iterations)
View(df_ill_Week)
#Creating one data frame with the columns of interest to sort them out by student
all_Item<-0
Fruit_Only==1
#Creating one data frame with the columns of interest to sort them out by student
all_Item<-0
Fruit_Only<-1
if(all_Items==1){
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
} else if (Fruit_Only==1){
DF_DR_Analysis<-Individual_Analysis_Fr%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
}
#Creating one data frame with the columns of interest to sort them out by student
all_Items<-0
Fruit_Only<-1
if(all_Items==1){
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
} else if (Fruit_Only==1){
DF_DR_Analysis<-Individual_Analysis_Fr%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
}
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
#Function to extract list into a Data Frame
Func_List2DF<-function(list){
df<-data.frame(matrix(unlist(list), nrow=length(list), byrow=T),stringsAsFactors=FALSE)
return(df)
}
lista<-replicate(5,Func_Rep_DR(DF_DR_Analysis),simplify = FALSE )
DF_DR_Rep<-Func_List2DF(lista)
#Analysis For weekly Dose Response
Reps_DR<-100
List_week_DR<-split(x=DF_DR_Analysis,f=DF_DR_Analysis$week)
lista<-replicate(Reps_DR,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
list_Df_Rep<-lapply(lista, Func_List2DF)
list_Df_Rep<-lapply(list_Df_Rep, setNames, c("Infections", "Illness"))
list_Df_Rep<-lapply(list_Df_Rep,bind_rows)
list_Df_Rep<-bind_cols(list_Df_Rep)
df_inf_Week = list_Df_Rep[,seq(1, ncol(list_Df_Rep), 2) ]
df_ill_Week = list_Df_Rep[,seq(2, ncol(list_Df_Rep), 2) ]
df_inf_Week<-as.data.frame(t(df_inf_Week))
df_ill_Week<-as.data.frame(t(df_ill_Week))
rownames(df_inf_Week)<-paste("Rep",1:Reps_DR)
rownames(df_ill_Week)<-paste("Rep",1:Reps_DR)
colnames(df_inf_Week)<-paste("Week",1:Sens_Iterations)
colnames(df_ill_Week)<-paste("Week",1:Sens_Iterations)
View(df_ill_Week)
View(df_inf_Week)
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness,week)
#Creating one data frame with the columns of interest to sort them out by student
all_Items<-0
Fruit_Only<-1
if(all_Items==1){
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
} else if (Fruit_Only==1){
DF_DR_Analysis<-Individual_Analysis_Fr%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$week <- substr(DF_DR_Analysis$ConsumedBy, 1, 1)
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
}
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
#Function to extract list into a Data Frame
Func_List2DF<-function(list){
df<-data.frame(matrix(unlist(list), nrow=length(list), byrow=T),stringsAsFactors=FALSE)
return(df)
}
lista<-replicate(5,Func_Rep_DR(DF_DR_Analysis),simplify = FALSE )
DF_DR_Rep<-Func_List2DF(lista)
#Analysis For weekly Dose Response
Reps_DR<-100
List_week_DR<-split(x=DF_DR_Analysis,f=DF_DR_Analysis$week)
lista<-replicate(Reps_DR,lapply(List_week_DR,Func_Rep_DR),simplify = FALSE)
list_Df_Rep<-lapply(lista, Func_List2DF)
list_Df_Rep<-lapply(list_Df_Rep, setNames, c("Infections", "Illness"))
list_Df_Rep<-lapply(list_Df_Rep,bind_rows)
list_Df_Rep<-bind_cols(list_Df_Rep)
df_inf_Week = list_Df_Rep[,seq(1, ncol(list_Df_Rep), 2) ]
df_ill_Week = list_Df_Rep[,seq(2, ncol(list_Df_Rep), 2) ]
df_inf_Week<-as.data.frame(t(df_inf_Week))
df_ill_Week<-as.data.frame(t(df_ill_Week))
rownames(df_inf_Week)<-paste("Rep",1:Reps_DR)
rownames(df_ill_Week)<-paste("Rep",1:Reps_DR)
colnames(df_inf_Week)<-paste("Week",1:Sens_Iterations)
colnames(df_ill_Week)<-paste("Week",1:Sens_Iterations)
View(df_ill_Week)
View(df_inf_Week)
