alpha<-0.04
betar<-0.055
for (i in 1:nrow(DF)){
hunov<-as.numeric(DF[i,colnames(DF)== "Contamination"])
Probinf<-(1-beta(alpha,(betar+hunov))/beta(alpha,betar))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
DF[i,colnames(DF)== "Infection"]<-TRUE
}else{
DF[i,colnames(DF)== "Infection"]<-FALSE
}
}
return(DF)
}
Func_DR_Illness<-function(DF){
nw<-2.55E-3
r<-0.086
for (i in 1:nrow(DF)){
hunov<-DF[i,colnames(DF)== "Contamination"]
if(DF[i,colnames(DF)== "Infection"] == TRUE){
Probill<-1-(1+nw*hunov)^(-r)
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
DF[i,colnames(DF)== "Illness"]<-TRUE
}else{
DF[i,colnames(DF)== "Illness"]<-FALSE
}
} else{
DF[i,colnames(DF)== "Illness"]<-FALSE
}
}
return(DF)
}
#STEP 1: WAshing, Run model with washing on Wrapping off.
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Narrowing down to consumed Items for exposure compisons
Individual_Analysis_Fr<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
sum(Individual_Analysis_Fr$Infection==TRUE)
sum(Individual_Analysis_Fr$Illness==TRUE)
nw<-2.55E-3
r<-0.086
hunov<-10E8
1-(1+(nw*hunov))^(-r)
nw<-2.55E-3
r<-0.086
hunov<-10E10
1-(1+(nw*hunov))^(-r)
nw<-2.55E-3
r<-0.086
hunov<-10E14
1-(1+(nw*hunov))^(-r)
nw<-2.55E-3
r<-0.086
hunov<-10E10
library("charFun")
install.packages("CharFun")
install.packages("sos")
library("sos")
kummerM(1,.04,.055)
install.packages("hypergeo")
library("hypergeo")
library("gsl")
hyperg_1F1(alpha,(alpha+betar),hunov)
hyperg_1F1(a = alpha,b = (alpha+betar),x = hunov)
hyperg_1F1(a = alpha,b = betar,x = hunov)
hyperg_1F1(a = alpha,b = betar,x = hunov)
hunov<-100
hyperg_1F1(a = alpha,b = betar,x = hunov)
hyperg_1F1(a = alpha,b = alpha+betar,x = hunov)
hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov)
beta(alpha,(betar+hunov))/beta(alpha,betar)
alpha<-.04
betar<-.055
hunov<-2000
1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov)
1-beta(alpha,(betar+hunov))/beta(alpha,betar)
alpha<-.04
betar<-.055
hunov<-40000
1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov)
1-beta(alpha,(betar+hunov))/beta(alpha,betar)
#Creation of Dataframe
DF_Validation_DR<-data.frame(
"Dose"=1:100000,
"Pinf"="",
stringsAsFactors = FALSE
)
for(i in 1:nrow(DF_Validation_DR)){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(DF_Validation_DR[i,colnames(DF_Validation_DR)== "Dose"])
Probinf<-1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov)
DF_Validation_DR[i,colnames(DF_Validation_DR)== "Pinf"]<-Probinf
}
DF_Validation_DR<-data.frame(
"Dose"=1:100000,
"Pinf"="",
stringsAsFactors = FALSE
)
for(i in 1:nrow(DF_Validation_DR)){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(DF_Validation_DR[i,colnames(DF_Validation_DR)== "Dose"])
Probinf<-1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov)
DF_Validation_DR[i,colnames(DF_Validation_DR)== "Pinf"]<-Probinf
}
plot(DF_Validation_DR$Dose,DF_Validation_DR$Pinf)
plot(DF_Validation_DR$Dose,DF_Validation_DR$Pinf)
#Validation of theillness dose Response
DF_Validation_DR<-data.frame(
"Dose"=1:100000,
"Pill"="",
stringsAsFactors = FALSE
)
for(i in 1:nrow(DF_Validation_DR)){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(DF_Validation_DR[i,colnames(DF_Validation_DR)== "Dose"])
Probill<-1-(1+nw*hunov)^(-r)
DF_Validation_DR[i,colnames(DF_Validation_DR)== "Pill"]<-Probill
}
for(i in 1:nrow(DF_Validation_DR)){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(DF_Validation_DR[i,colnames(DF_Validation_DR)== "Dose"])
Probill<-1-(1+nw*hunov)^(-r)
DF_Validation_DR[i,colnames(DF_Validation_DR)== "Pill"]<-Probill
}
```
plot(DF_Validation_DR$Dose,DF_Validation_DR$Pill)
#Validation of theillness dose Response
DF_Validation_DR<-data.frame(
"Dose"=c(10^1,10^2,10^3,10^4,10^5,10^6,10^7,10^8),
"Pill"="",
stringsAsFactors = FALSE
)
for(i in 1:nrow(DF_Validation_DR)){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(DF_Validation_DR[i,colnames(DF_Validation_DR)== "Dose"])
Probill<-1-(1+nw*hunov)^(-r)
DF_Validation_DR[i,colnames(DF_Validation_DR)== "Pill"]<-Probill
}
plot(DF_Validation_DR$Dose,DF_Validation_DR$Pill)
#Validation of theillness dose Response
DF_Validation_DR<-data.frame(
"Dose"=c(10^1,10^2,10^3,10^4,10^5,10^6,10^7,10^8),
"Pill"="",
stringsAsFactors = FALSE
)
for(i in 1:nrow(DF_Validation_DR)){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(DF_Validation_DR[i,colnames(DF_Validation_DR)== "Dose"])
Probill<-1-(1+nw*hunov)^(-r)
DF_Validation_DR[i,colnames(DF_Validation_DR)== "Pill"]<-Probill
}
ggplot(data=DF_Validation_DR, aes(x=Dose,y=Pill))+
geom_point()+
scale_x_log10()
#Validation of theillness dose Response
DF_Validation_DR<-data.frame(
"Dose"=c(10^1,10^1.5,10^2,10^2.5,10^3,10^3.5,10^4,10^4.5,10^5,10^5.5,10^6,10^6.5,10^7,10^7.5,10^8),
"Pill"="",
stringsAsFactors = FALSE
)
for(i in 1:nrow(DF_Validation_DR)){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(DF_Validation_DR[i,colnames(DF_Validation_DR)== "Dose"])
Probill<-1-(1+nw*hunov)^(-r)
DF_Validation_DR[i,colnames(DF_Validation_DR)== "Pill"]<-Probill
}
ggplot(data=DF_Validation_DR, aes(x=Dose,y=Pill))+
geom_point()+
scale_x_log10()
ggplot(data=DF_Validation_DR, aes(x=Dose,y=Pill))+
geom_point()
#Creating Data Frame of Consumed Items
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Narrowing down to consumed Items for exposure compisons
Individual_Analysis_Fr<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
```{r}
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
#Number of ITems per category
sum(Individual_Analysis_Fr$Infection==TRUE)
sum(Individual_Analysis_Fr$Illness==TRUE)
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
#Number of ITems per category
Number_Inf_Fr<-sum(Individual_Analysis_Fr$Infection==TRUE)
print(Number_Inf_Fr)
Number_Ill_Fr<-sum(Individual_Analysis_Fr$Illness==TRUE)
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
#Number of ITems per category
Number_Inf_Fr<-sum(Individual_Analysis_Fr$Infection==TRUE)
print(Number_Inf_Fr, "Students Infected")
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
#Number of ITems per category
Number_Inf_Fr<-sum(Individual_Analysis_Fr$Infection==TRUE)
print(Number_Inf_Fr "Students Infected")
print(paste(Number_Inf_Fr ,"Students Infected"))
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
#Number of ITems per category
Number_Inf_Fr<-sum(Individual_Analysis_Fr$Infection==TRUE)
print(paste(Number_Inf_Fr ,"Students Infected"))
Number_Ill_Fr<-sum(Individual_Analysis_Fr$Illness==TRUE)
print(paste(Number_ill_Fr ,"Students Ill"))
Number_Ill_Fr<-sum(Individual_Analysis_Fr$Illness==TRUE)
print(paste(Number_ill_Fr ,"Students Ill"))
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
#Number of ITems per category
Number_Inf_Fr<-sum(Individual_Analysis_Fr$Infection==TRUE)
print(paste(Number_Inf_Fr ,"Students Infected"))
Number_Ill_Fr<-sum(Individual_Analysis_Fr$Illness==TRUE)
print(pasteNumber_Ill_Fr ,"Students Ill"))
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr<-Func_DR_Infection(Individual_Analysis_Fr)
Individual_Analysis_Fr<-Func_DR_Illness(Individual_Analysis_Fr)
#Number of ITems per category
Number_Inf_Fr<-sum(Individual_Analysis_Fr$Infection==TRUE)
print(paste(Number_Inf_Fr ,"Students Infected"))
Number_Ill_Fr<-sum(Individual_Analysis_Fr$Illness==TRUE)
print(paste(Number_Ill_Fr ,"Students Ill"))
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_SensAnalysis.R")
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Visuals
source("Output_Visuals.R")
#Visuals
source("Output_Visuals.R")
warnings()
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Intervention Analysis for Washing and Wraaping Fruit.
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Changing Inputs for Washing on, Wraaping off.
#Washing Between Services
Wash_Between_Services<-0
#Wash Selection Table Fruit
Wash_Selection_YN_Fr<-1
#Wash Share Table Items
Wash_ST_YN_Fr<-1
#Changing Wrapping off:
#Wrapping Apples
Wrapping_Apples<-0
#Running Loop First:
source("Main_Loops2.R")
#STEP 1: WAshing, Run model with washing on Wrapping off.
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. This created the data frame for items when washed was on
Individual_Analysis_Fr_Wash<-Individual_Analysis_Fr
#4. Narrowing down to consumed Items for exposure compisons
Individual_Analysis_Fr_Consumed_W<-Individual_Analysis_Fr_Wash[which(Individual_Analysis_Fr_Wash$Location == "Consumed"),]
#5 Delta Contaminations
Individual_Analysis_Fr_Consumed_W$DeltaCont<-Individual_Analysis_Fr_Consumed_W$Contamination-Individual_Analysis_Fr_Consumed_W$InContamination
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Changing Inputs for Washing off, Wraaping on.
#Washing Between Services
Wash_Between_Services<-0
#Wash Selection Table Fruit
Wash_Selection_YN_Fr<-0
#Wash Share Table Items
Wash_ST_YN_Fr<-0
#Changing Wrapping off:
#Wrapping Apples
Wrapping_Apples<-1
#Running Loop again:
source("Main_Loops2.R")
#STEP 2: Turning on Wrapping, Turning off Washing
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. This one creates the data frame for the wrapped items consumed
Individual_Analysis_Fr_Consumed_Wr<-Individual_Analysis_Fr
Individual_Analysis_Fr_Consumed_Wr<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
#4 Delta Contamination
Individual_Analysis_Fr_Consumed_Wr$DeltaCont<-Individual_Analysis_Fr_Consumed_Wr$ContConsumed-Individual_Analysis_Fr_Consumed_Wr$InContamination
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Changing Inputs for Washing off, Wraaping on.
#Washing Between Services
Wash_Between_Services<-0
#Wash Selection Table Fruit
Wash_Selection_YN_Fr<-0
#Wash Share Table Items
Wash_ST_YN_Fr<-0
#Changing Wrapping off:
#Wrapping Apples
Wrapping_Apples<-0
#Running Loop again:
source("Main_Loops2.R")
#Step 3. Run the scenarios without Wraaping or Washing
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. This one creates the data frame for the wrapped items consumed
Individual_Analysis_Fr_Consumed_NoI<-Individual_Analysis_Fr
Individual_Analysis_Fr_Consumed_NoI<-Individual_Analysis_Fr[which(Individual_Analysis_Fr$Location == "Consumed"),]
#4. Delta Contamination
Individual_Analysis_Fr_Consumed_NoI$DeltaCont<-Individual_Analysis_Fr_Consumed_NoI$Contamination-Individual_Analysis_Fr_Consumed_NoI$InContamination
#Step 4: Wrap for the DF, in order to have them as the same type
#1 Creating DF for the DElta Contamination
IA_Wash<-Individual_Analysis_Fr_Consumed_W[,c(1,18)]
IA_Cont<-Individual_Analysis_Fr_Consumed_NoI[,c(1,18)]
IA_Wrapp<-Individual_Analysis_Fr_Consumed_Wr[,c(1,18)]
IA_Wash$Type<-"Washed"
IA_Cont$Type<-"No Intervention"
IA_Wrapp$Type<-"Wrapped"
names(IA_Wrapp)[2]<-"DeltaCont"
IA_All<-bind_rows(IA_Wash,IA_Cont,IA_Wrapp)
#2. Creating Data Frame for Contamination
IA_Wash_c<-Individual_Analysis_Fr_Consumed_W[,c(1,4)]
IA_Cont_c<-Individual_Analysis_Fr_Consumed_NoI[,c(1,4)]
IA_Wrapp_c<-Individual_Analysis_Fr_Consumed_Wr[,c(1,5)]
IA_Wrapp_Ini<-Individual_Analysis_Fr_Consumed_W[,c(1,6)]
IA_Wash_c$Type<-"Wash"
IA_Cont_c$Type<-"No Intervention"
IA_Wrapp_c$Type<-"Wrapped"
IA_Wrapp_Ini$Type<-"Initial Cont"
names(IA_Wrapp_c)[2]<-"Contamination"
names(IA_Wrapp_Ini)[2]<-"Contamination"
IA_All_c<-bind_rows(IA_Wash_c,IA_Cont_c,IA_Wrapp_c)
#Making 0s into very small values
IA_All_c[IA_All_c==0]<-(10^-20)
#Making the Contaminations into log Scale, may not be necessary to analyze.
IA_All_cLog<-IA_All_c
IA_All_cLog$Contamination<-log10(IA_All_cLog$Contamination)
IA_All_cLog00<-IA_All_cLog[which(IA_All_cLog$Contamination > 0),]
#Creation of plot with the log scale, density
#Contamination with log
ggplot(data = IA_All_cLog,aes(x=Contamination, fill=Type, linetype=Type))+
geom_density(colour="black", alpha=.2)+
scale_x_continuous(n.breaks = 10)+
xlab("Contamination log PFU/Item")+
ylab("Density")+
ggtitle("Density Curves Interventions")+
theme(plot.title = element_text(hjust = 0.5))
