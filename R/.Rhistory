ggplot(data = IA_All_cLog00,aes( y=Contamination, x=Type))+
geom_boxplot(aes(fill=Type),varwidth = TRUE)+
ylab("Contamination Log PFU/Item")+
xlab("Intervention Type")+
ggtitle("Boxplot Intervention Comparison")+
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(n.breaks = 15)+
stat_summary(fun.data = give.n, geom = "text", fun = median,vjust = -3)+
geom_text(data = p_meds, aes(x = Type, y = median, label = median),
size = 3, vjust = +1.5, color="blue")
#Dose Response
Vec_Infected_NI<-c()
Vec_Infected_W<-c()
Vec_Infected_Wr<-c()
Vec_Ill_NI<-c()
Vec_Ill_W<-c()
Vec_Ill_Wr<-c()
#No Intervention
for (i in 1:100){
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr_Consumed_NoI<-Func_DR_Infection(Individual_Analysis_Fr_Consumed_NoI)
Individual_Analysis_Fr_Consumed_NoI<-Func_DR_Illness(Individual_Analysis_Fr_Consumed_NoI)
#Number of Items per category
Number_Inf_NI<-sum(Individual_Analysis_Fr_Consumed_NoI$Infection==TRUE)
Vec_Infected_NI<-c(Vec_Infected_NI,Number_Inf_NI)
Number_Ill_NI<-sum(Individual_Analysis_Fr_Consumed_NoI$Illness==TRUE)
Vec_Ill_NI<-c(Vec_Ill_NI,Number_Ill_NI)
}
median(Number_Inf_NI)
mean(Number_Ill_NI)
#No Wash
for (i in 1:100){
#Dose Response. Adding the Dose Response to the Items
Individual_Analysis_Fr_Consumed_Wr<-Func_DR_Infection(Individual_Analysis_Fr_Consumed_Wr)
Individual_Analysis_Fr_Consumed_Wr<-Func_DR_Illness(Individual_Analysis_Fr_Consumed_Wr)
#Number of Items per category
Number_Inf_Wr<-sum(Individual_Analysis_Fr_Consumed_Wr$Infection==TRUE)
Vec_Infected_Wr<-c(Vec_Infected_Wr,Number_Inf_Wr)
Number_Ill_Wr<-sum(Individual_Analysis_Fr_Consumed_Wr$Illness==TRUE)
Vec_Ill_Wr<-c(Vec_Ill_Wr,Number_Ill_Wr)
}
Func_TF_DR<-function(x){
hunov<-as.numeric(DF[i,colnames(DF)== "Contamination"])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Q
Q
Func_TF_DR<-function(x){
hunov<-as.numeric(x$Contamination)
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR,  alpha<-0.04, betar<-0.055)
Func_TF_DR<-function(x){
alpha<-0.04, betar<-0.055
hunov<-as.numeric(x$Contamination)
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x$Contamination)
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Q
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x)
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame$Contamination,1,Func_TF_DR)
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[,colnames(x)=="Contamination"])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Q
View(Fr_Data.Frame)
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[,4])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[4])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Q
#Setting Working Directory
#Setting Working Directory
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[4])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[colnames(x)=="Contamination"])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x$Contamination)
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Q
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[[Contamination]])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Q
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[["Contamination"]])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Fr_Data.Frame$Infection<-apply(Fr_Data.Frame,1,Func_TF_DR)
View(Fr_Data.Frame)
Func_DR_Illness<-function(x){
nw<-2.55E-3
r<-0.086
hunov<-x[["Contamination"]]
if(x[["Infection"]] == TRUE){
Probill<-1-(1+nw*hunov)^(-r)
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
return(TRUE)
}else{
return(FALSE)
}
} else{
return(FALSE)
}
}
Fr_Data.Frame$Illness<-apply(Fr_Data.Frame,1,Func_DR_Illness)
Func_DR_Illness<-function(x){
nw<-2.55E-3
r<-0.086
hunov<-x[["Contamination"]]
if(x[["Infection"]] == TRUE){
Probill<-(1-(1+nw*hunov)^(-r))
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
return(TRUE)
}else{
return(FALSE)
}
} else{
return(FALSE)
}
}
Fr_Data.Frame$Illness<-apply(Fr_Data.Frame,1,Func_DR_Illness)
Func_DR_Illness<-function(x){
nw<-2.55E-3
r<-0.086
hunov<-as.numeric(x[["Contamination"]])
if(x[["Infection"]] == TRUE){
Probill<-(1-(1+nw*hunov)^(-r))
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
return(TRUE)
}else{
return(FALSE)
}
} else{
return(FALSE)
}
}
Fr_Data.Frame$Illness<-apply(Fr_Data.Frame,1,Func_DR_Illness)
View(Fr_Data.Frame)
Func_DR_Infection<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[["Contamination"]])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
Func_DR_Illness<-function(x){
nw<-2.55E-3
r<-0.086
hunov<-as.numeric(x[["Contamination"]])
if(x[["Infection"]] == TRUE){
Probill<-(1-(1+nw*hunov)^(-r))
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
return(TRUE)
}else{
return(FALSE)
}
} else{
return(FALSE)
}
}
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
Vec_DR<-c(0)
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
Vec_DR<-c(0)
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
Vec_DR<-c(0)
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR<-c(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
Vec_DR
Vec_DR<-c()
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR<-c(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR<-c(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
Vec_DR
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10000){
#Dose Response. Adding the Dose Response to the Items
Vec_DR<-c(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
return(Number_Inf_Fr)
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
return(Number_Inf_Fr)
}
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
return(Number_Inf_Fr,Number_Inf_Fr)
}
replicate(10,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Inf_Fr )
return(l)
}
replicate(10,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Inf_Fr )
return(l)
}
replicate(1000,Func_Rep_DR(DF_DR_Analysis))
List_DR<-replicate(1000,Func_Rep_DR(DF_DR_Analysis))
View(List_DR)
hist(List_DR[1])
View(List_DR)
View(List_DR)
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Inf_Fr )
return(l)
}
list<-as.list(replicate(100,Func_Rep_DR(DF_DR_Analysis)))
View(list)
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Inf_Fr )
return(l)
}
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Ill_Fr )
return(l)
}
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list(Number_Inf_Fr, Number_Ill_Fr )
return(l)
}
replicate(100,Func_Rep_DR(DF_DR_Analysis))
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis))
lista$infection
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis))
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "list")
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "matrix")
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = FALSE)
View(lista)
View(lista)
lapply(lista, function (x) x[c('infection', 'Illness')])
sapply(lista, function (x) x[c('infection', 'Illness')])
lista1<-sapply(lista, function (x) x[c('infection', 'Illness')])
lapply(lista, f, y)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "vector" )
View(lista)
lista<-as.data.frame(lista)
View(lista)
