}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Q
Func_TF_DR<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[["Contamination"]])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
apply(Fr_Data.Frame,1,Func_TF_DR)
Fr_Data.Frame$Infection<-apply(Fr_Data.Frame,1,Func_TF_DR)
View(Fr_Data.Frame)
Func_DR_Illness<-function(x){
nw<-2.55E-3
r<-0.086
hunov<-x[["Contamination"]]
if(x[["Infection"]] == TRUE){
Probill<-1-(1+nw*hunov)^(-r)
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
return(TRUE)
}else{
return(FALSE)
}
} else{
return(FALSE)
}
}
Fr_Data.Frame$Illness<-apply(Fr_Data.Frame,1,Func_DR_Illness)
Func_DR_Illness<-function(x){
nw<-2.55E-3
r<-0.086
hunov<-x[["Contamination"]]
if(x[["Infection"]] == TRUE){
Probill<-(1-(1+nw*hunov)^(-r))
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
return(TRUE)
}else{
return(FALSE)
}
} else{
return(FALSE)
}
}
Fr_Data.Frame$Illness<-apply(Fr_Data.Frame,1,Func_DR_Illness)
Func_DR_Illness<-function(x){
nw<-2.55E-3
r<-0.086
hunov<-as.numeric(x[["Contamination"]])
if(x[["Infection"]] == TRUE){
Probill<-(1-(1+nw*hunov)^(-r))
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
return(TRUE)
}else{
return(FALSE)
}
} else{
return(FALSE)
}
}
Fr_Data.Frame$Illness<-apply(Fr_Data.Frame,1,Func_DR_Illness)
View(Fr_Data.Frame)
Func_DR_Infection<-function(x){
alpha<-0.04
betar<-0.055
hunov<-as.numeric(x[["Contamination"]])
Probinf<-(1-hyperg_1F1(a = alpha,b = alpha+betar,x = -hunov))
Infected_YN<-ifelse(runif(1)<Probinf,1,0)
if(Infected_YN==1){
return(TRUE)
}else{
return(FALSE)
}
}
Func_DR_Illness<-function(x){
nw<-2.55E-3
r<-0.086
hunov<-as.numeric(x[["Contamination"]])
if(x[["Infection"]] == TRUE){
Probill<-(1-(1+nw*hunov)^(-r))
Ill_YN<-ifelse(runif(1)<Probill,1,0)
if(Ill_YN==1){
return(TRUE)
}else{
return(FALSE)
}
} else{
return(FALSE)
}
}
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
Vec_DR<-c(0)
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
Vec_DR<-c(0)
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
Vec_DR<-c(0)
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR<-c(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
Vec_DR
Vec_DR<-c()
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR<-c(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10){
#Dose Response. Adding the Dose Response to the Items
Vec_DR<-c(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
Vec_DR
#Dose Response. Adding the Dose Response to the Items
for (i in 1:10000){
#Dose Response. Adding the Dose Response to the Items
Vec_DR<-c(Vec_DR,sum(apply(DF_DR_Analysis,1,Func_DR_Infection)))
}
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
return(Number_Inf_Fr)
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
return(Number_Inf_Fr)
}
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
return(Number_Inf_Fr,Number_Inf_Fr)
}
replicate(10,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Inf_Fr )
return(l)
}
replicate(10,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Inf_Fr )
return(l)
}
replicate(1000,Func_Rep_DR(DF_DR_Analysis))
List_DR<-replicate(1000,Func_Rep_DR(DF_DR_Analysis))
View(List_DR)
hist(List_DR[1])
View(List_DR)
View(List_DR)
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Inf_Fr )
return(l)
}
list<-as.list(replicate(100,Func_Rep_DR(DF_DR_Analysis)))
View(list)
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Inf_Fr )
return(l)
}
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list(Infections=Number_Inf_Fr, Illness =Number_Ill_Fr )
return(l)
}
replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list(Number_Inf_Fr, Number_Ill_Fr )
return(l)
}
replicate(100,Func_Rep_DR(DF_DR_Analysis))
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis))
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis))
lista$infection
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis))
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "list")
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "matrix")
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = FALSE)
View(lista)
View(lista)
lapply(lista, function (x) x[c('infection', 'Illness')])
sapply(lista, function (x) x[c('infection', 'Illness')])
lista1<-sapply(lista, function (x) x[c('infection', 'Illness')])
lapply(lista, f, y)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "vector" )
View(lista)
lista<-as.data.frame(lista)
View(lista)
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
Here we organize the Data and Divide it into sections.
```{r}
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
```
```{r}
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Dose Response. Adding the Dose Response to the Items
Func_Rep_DR<-function(DF_DR_Analysis){
DF_DR_Analysis$Infection<-apply(DF_DR_Analysis,1,Func_DR_Infection)
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
#
DF_DR_Analysis$Illness<-apply(DF_DR_Analysis,1,Func_DR_Illness)
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
l<-list("infection"=Number_Inf_Fr, "Illness"=Number_Ill_Fr )
return(l)
}
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "vector" )
lista<-as.data.frame(lista)
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "vector" )
lista[1]
lista[[2]]
sapply(1:5,X=DF_DR_Analysis, FUN = Func_Rep_DR)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "matrix" )
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = "matrix" )
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify =  FALSE )
View(lista)
lista[1]
lista[2]
lista[[1]]
lista[[1:100]]&Infection
lista1<-as.data.frame(lista)
t(lista1)
lista1<-t(lista1)
View(lista1)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify =  FALSE )
as.matrix(lista)
a<-as.matrix(lista)
View(a)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify =  "data.frame" )
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify =  "list" )
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify =  FALSE )
View(lista)
sapply(lista[[]]$Infection)
lista$Infection
lista[]$Infection
lista[[]]$Infection
lista[[1]]$Infection
lista[[1]]$infection
lista[[]]$infection
lista[$infection
lista$infection
which(lista=="infection")
lista %>% at_depth(2, 2) %>% flatten()
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify =  FALSE )
as.data.frame(lista)
as.data.frame(t(lista))
as.data.frame((lista))
lisy<-as.data.frame((lista))
View(lisy)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lisy<-as.data.frame((lista))
View(lisy)
transpose(lisy)
t(lisy)
lista<-as.data.frame((lista))
lista<-t(lista)
View(lista)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lista<-as.data.frame((lista))
lista<-t(lista)
lista<-as.data.frame((lista))
lista<-t(lista)
lista<-t(lista)
View(lista)
lista<-as.data.frame((lista))
t(lista)
lisy<-as.data.frame((lista))
lisy<-t(lisy)
lisy<-as.data.frame((lista))
View(lisy)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lisy<-as.data.frame((lista))
View(lisy)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lisy<-as.data.frame(t(lista))
View(lisy)
hist(x=lisy$infection)
View(lisy)
type(lisy)
class(lisy)
class(lisy$infection)
as.numeric(lisy$infection)
as.numeric(lisy$Illness)
hist(x=lisy$infection)
lista<-replicate(100,Func_Rep_DR(DF_DR_Analysis),simplify = TRUE )
lisy<-as.data.frame(t(lista))
as.numeric(lisy$infection)
as.numeric(lisy$Illness)
hist(x=lisy$infection)
lisy<-as.data.frame(lisy)
as.numeric(lisy$infection)
as.numeric(lisy$Illness)
as.numeric(lisy$Illness)
hist(x=lisy$infection)
