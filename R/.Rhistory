if(Sum_Pss_Available>ntouched_Pss){
for (i in 1:ntouched_Pss){
#Searching the Touched Pss
Search.df.Pss_touched<-Func_seach_Data4(Pss_Data.Frame,Pss_Data.Frame$Location,"Selection Table",Row_size_Pss) #Searching for Pss to touch
Pss_Touched<-as.numeric(Search.df.Pss_touched$Pss.No.) #Pss touched
Pss_Data.Frame[Pss_Touched,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Touched,colnames(Pss_Data.Frame)=="History"], "Touched") #Adding History to History
#Cross Contamination from Touching Pss @Touch
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student ,Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Touched)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Touched) #Adding Allergen Contamination from touch.
}
}
}
#Student picking Pss from line
Pick_YN_Pss<-ifelse(runif(1)<Pr_select_Pss,1,0)
#Picking a Pss from Pss Data Frame
if(Pick_YN_Pss==1){
Pss_Available<-Pss_Data.Frame$Location == "Selection Table"
Sum_Pss_Available<-sum(Pss_Available, na.rm = TRUE)
if(Sum_Pss_Available>0){
Search.df.Pss<-Func_seach_Data4(Pss_Data.Frame,Pss_Data.Frame$Location,"Selection Table",Row_size_Pss)
#Pss Selected #
Pss_Picked<-as.numeric(Search.df.Pss$Pss.No.)
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Tray"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Tray")
}
}
#Contamination From Hands to Pss going to Tray
if(Pick_YN_Pss==1){
#Cross Contamination from Touching Pss @Tray
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student ,Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Picked) #Adding Allergen Contamination from touch.
}
#PRE
#Did the Student touch any Pre during selection?
Touch_YN_Pre<-ifelse(runif(1)<Pr_touch_Food,1,0)
#If touched what is the contamination and adding it to data frame
if(Touch_YN_Pre==1){
Pre_Available<-Pre_Data.Frame$Location == "Selection Table"
Sum_Pre_Available<-sum(Pre_Available, na.rm = TRUE)
if(Sum_Pre_Available>ntouched_Pre){
for (i in 1:ntouched_Pre){
#Searching the Touched Pre
Search.df.Pre_touched<-Func_seach_Data4(Pre_Data.Frame,Pre_Data.Frame$Location,"Selection Table",Row_size_Pre) #Searching for Pre to touch
Pre_Touched<-as.numeric(Search.df.Pre_touched$Pre.No.) #Pre touched
Pre_Data.Frame[Pre_Touched,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Touched,colnames(Pre_Data.Frame)=="History"], "Touched") #Adding History to History
#Cross Contamination from Touching Pre @Touch
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Touched)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Touched) #Adding Allergen Contamination from touch.
}
}
}
#Picking Pre from line
Pick_YN_Pre<-ifelse(runif(1)<Pr_select_Pre,1,0)
#Picking a Pre from Pre Data Frame
if(Pick_YN_Pre==1){
Pre_Available<-Pre_Data.Frame$Location == "Selection Table"
Sum_Pre_Available<-sum(Pre_Available, na.rm = TRUE)
if(Sum_Pre_Available>0){
Search.df.Pre<-Func_seach_Data4(Pre_Data.Frame,Pre_Data.Frame$Location,"Selection Table",Row_size_Pre)
#Pre Selected #
Pre_Picked<-as.numeric(Search.df.Pre$Pre.No.)
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
}
}
#Contamination From Hands to Pre going to Tray
if(Pick_YN_Pre==1){
#Cross Contamination from Touching Pre @Tray
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Picked) #Adding Allergen Contamination from touch.
}
# Consumption==========================================================================
#Fruit
#Did the student consume the Fruit?
Eat_YN_Fr<-ifelse(runif(1)<Pr_eat_Fr,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_YN_Fr==1){
if(Eat_YN_Fr==1){
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Consumed"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "Consumed")
#Contamination
if (Wrapping_Apples == 1){
#Cross Contamination at consumption if apples wrapped
Func_Cross_Contamination_Fr_Consumption_Wrapped(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_Picked) #Adding Allergen Contamination from touch.
} else if (Wrapping_Apples == 0){
#Cross Contamination @ Consumption apples not wrapped.
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
} #end of if wrapp
}else{
#Updating Location and History for consumption
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Consumed"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "NotConsumed")
#Cross Crontamination from apples not being Consumed touch to ST/ Trash
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_Picked) #Adding Allergen Contamination from touch.
} #end of eat if statement
}#end of pick statement
#Pss
#Did student consume the Pss
Eat_YN_Pss<-ifelse(runif(1)<Pr_eat_Pss,1,0)
#Changing Data Frame for consumption of Pss
if(Pick_YN_Pss==1){
if(Eat_YN_Pss==1){
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Contamination Insdide Pss @Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Picked) #Adding Allergen Contamination from touch.
}else{
#Updating Data frame Location and History
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Consumption
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_Picked) #Adding Allergen Contamination from touch.
} #end of Else statement for Eat
} #end of If
#Pre
#Did student consume the Pre
Eat_YN_Pre<-ifelse(runif(1)<Pr_eat_Pre,1,0)
#Changind Data Frame for consumption of Pre
if(Pick_YN_Pre==1){
if(Eat_YN_Pre==1){
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_Picked) #Adding Allergen Contamination from touch.
}
}
#Not Consumed items to share table=======================================================
if(Share_Table_YN==1){
#Proability of the student sharing their food.
Share_YN_Food<-ifelse(runif(1)<Pr_share_Food,1,0)
#Fruit
#Items in Share Table:
if(Pick_YN_Fr==1){
if(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Shared"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "Shared")
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="STtimes"]<-Func_Index_DF(Fr_Data.Frame,Fr_Picked,"STtimes")+1
V_Shared_Fr<-(V_Shared_Fr+1)
}else{
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Shared"
Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_Picked,colnames(Fr_Data.Frame)=="History"], "NotShared")
}
}
}
#Pss
if(Pick_YN_Pss==1){
if(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Shared"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "Shared")
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="STtimes"]<-Func_Index_DF(Pss_Data.Frame,Pss_Picked,"STtimes")+1
V_Shared_Pss<-(V_Shared_Pss+1)
}else{
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Shared"
Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_Picked,colnames(Pss_Data.Frame)=="History"], "NotShared")
}
}
}
#Pre
if(Pick_YN_Pre==1){
if(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="Location"]== "Not Consumed"){
if(Share_YN_Food==1){
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "Shared")
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="STtimes"]<-Func_Index_DF(Pre_Data.Frame,Pre_Picked,"STtimes")+1
V_Shared_Pre<-(V_Shared_Pre+1)
}else{
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)== "Location"]<-" Not Shared"
Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_Picked,colnames(Pre_Data.Frame)=="History"], "NotShared")
}
}
}
#Picking and consuming ST items ==================================================================
#Shared Fruit
Items_Shared<-Fr_Data.Frame$Location == "Shared"
Sum_Shared<-sum(Items_Shared, na.rm = TRUE)
if(Sum_Shared>0){
#Fruit
#Did a student pick an item for the share table?
Pick_ST_YN_Fr<-ifelse(runif(1)<Pr_Pick_ST_Fr,1,0)
#Fruit picked from Share Table.
if(Pick_ST_YN_Fr==1){
Search.df.fr_ST<-Func_Search_Data(Fr_Data.Frame,Fr_Data.Frame$Location,"Shared",1)
#Fruit from share table selected #
Fr_ST_Picked<-as.numeric(Search.df.fr_ST$Apple.No.)
Fr_Data.Frame[as.numeric(row.names(Search.df.fr_ST)),colnames(Search.df.fr)== "Location"]<-"Tray"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Fruit or from Fruit to Hand.
if(Pick_ST_YN_Fr==1){
#Contamination from picking item share table
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Fr<-ifelse(runif(1)<Pr_eat_ST_Fr,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Fr==1){
if(Eat_YN_ST_Fr==1){
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "Consumed")
#Contamination
if (Wrapping_Apples == 1){
#Cross Contamination at consumption if apples wrapped
Func_Cross_Contamination_Fr_Consumption_Wrapped(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} else if (Wrapping_Apples == 0){
#Cross Contamination @ Consumption apples not wrapped.
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
} #end of if wrapp
}else{
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)== "Location"]<-"Not Consumed"
Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"]<-paste(Fr_Data.Frame[Fr_ST_Picked,colnames(Fr_Data.Frame)=="History"], "NotConsumed")
#Cross Crontamination from apples not consumed from ST
Func_Cross_Contamination_Fr(Cont_Student = Cont_Student, Fr_Data.Frame = Fr_Data.Frame, Fr_Picked = Fr_ST_Picked)
Fr_Data.Frame<-Func_Allergen_CC(Fr_Data.Frame,Fr_ST_Picked) #Adding Allergen Contamination from touch.
} #end of eat if
} # end of picking if
}  #end of if to make sure there are ST items
#Shared Pss
Items_Shared_Pss<-Pss_Data.Frame$Location == "Shared"
Sum_Shared_Pss<-sum(Items_Shared_Pss, na.rm = TRUE)
if(Sum_Shared_Pss>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pss<-ifelse(runif(1)<Pr_Pick_ST_Pss,1,0)
#Pss picked from Share Table.
if(Pick_ST_YN_Pss==1){
Search.df.Pss_ST<-Func_Search_Data(Pss_Data.Frame,Pss_Data.Frame$Location,"Shared",1)
#Pss from share table selected #
Pss_ST_Picked<-as.numeric(Search.df.Pss_ST$Pss.No.)
Pss_Data.Frame[as.numeric(row.names(Search.df.Pss_ST)),colnames(Search.df.Pss)== "Location"]<-"Tray"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Pss or from Hand to Pss.
if(Pick_ST_YN_Pss==1){
#Contamination at tray
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pss<-ifelse(runif(1)<Pr_eat_ST_Pss,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pss==1){
if(Eat_YN_ST_Pss==1){
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "Consumed")
#Cross Contamination @ Consumption
Func_Cross_Contamination_Pss_Consumption(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)== "Location"]<-"Not Consumed"
Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"]<-paste(Pss_Data.Frame[Pss_ST_Picked,colnames(Pss_Data.Frame)=="History"], "NotConsumed")
#Contamination from Touch @ Not Consumption
Func_Cross_Contamination_Pss(Cont_Student = Cont_Student, Pss_Data.Frame = Pss_Data.Frame, Pss_Picked = Pss_ST_Picked)
Pss_Data.Frame<-Func_Allergen_CC(Pss_Data.Frame,Pss_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}
#Shared Pre
Items_Shared_Pre<-Pre_Data.Frame$Location == "Shared"
Sum_Shared_Pre<-sum(Items_Shared_Pre, na.rm = TRUE)
if(Sum_Shared_Pre>0){
#Did a student pick an item for the share table?
Pick_ST_YN_Pre<-ifelse(runif(1)<Pr_Pick_ST_Pre,1,0)
#Pre picked from Share Table.
if(Pick_ST_YN_Pre==1){
Search.df.Pre_ST<-Func_Search_Data(Pre_Data.Frame,Pre_Data.Frame$Location,"Shared",1)
#Pre from share table selected #
Pre_ST_Picked<-as.numeric(Search.df.Pre_ST$Pre.No.)
Pre_Data.Frame[as.numeric(row.names(Search.df.Pre_ST)),colnames(Search.df.Pre)== "Location"]<-"Tray"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Tray")
}
#Contamination from Hand to Fruit or from Hand to Fruit.
if(Pick_ST_YN_Pre==1){
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination
}
#Consumption of share table item
#Did the student consume the Fruit?
Eat_YN_ST_Pre<-ifelse(runif(1)<Pr_eat_ST_Pre,1,0)
#Changing Data Frame so it updates when student consumes fruit.
if(Pick_ST_YN_Pre==1){
if(Eat_YN_ST_Pre==1){
#Updating Values in DF
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "Consumed")
#Contamination Container Pre to Mouth @ Consumption
Func_Cross_Contamination_Pre_Consumption(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}else{
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)== "Location"]<-"Not Consumed"
Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"]<-paste(Pre_Data.Frame[Pre_ST_Picked,colnames(Pre_Data.Frame)=="History"], "NotConsumed")
#Contaminationat Pre Container
Func_Cross_Contamination_Pre(Cont_Student = Cont_Student, Pre_Data.Frame = Pre_Data.Frame, Pre_Picked = Pre_ST_Picked)
Pre_Data.Frame<-Func_Allergen_CC(Pre_Data.Frame,Pre_ST_Picked) #Adding Allergen Contamination from touch.
}
}
}#end of if there is st items loop
}#end of toggle loop
}  #end of first loop
#Updated items from not consumed, not shared, etc to wasted.
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Shared"]<-"Discarded"
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Fr_Data.Frame$Location[Fr_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pss_Data.Frame$Location[Pss_Data.Frame$Location=="Shared"]<-"Discarded"
}
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Shared"]<-"Discarded"
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Not Consumed"]<-"Discarded"
if(Reservice_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Selection Table"]<-"Discarded"
}
if(Resharing_YN==0){
Pre_Data.Frame$Location[Pre_Data.Frame$Location=="Shared"]<-"Discarded"
}
#Adding Services
Fr_Data.Frame<-func_Add_Services(Fr_Data.Frame)
Pss_Data.Frame<-func_Add_Services(Pss_Data.Frame)
Pre_Data.Frame<-func_Add_Services(Pre_Data.Frame)
#Adding the data to the datalist
datalistFr[[j]]<-Fr_Data.Frame
datalistPss[[j]]<-Pss_Data.Frame
datalistPre[[j]]<-Pre_Data.Frame
List_Sens_Fr[[paste(l,k,j)]]<-Fr_Data.Frame
List_Sens_Pss[[paste(l,k,j)]]<-Pss_Data.Frame
List_Sens_Pre[[paste(l,k,j)]]<-Pre_Data.Frame
source("Output_Services.R")
message("Service #", j)
} #end of second loop
#Creation of the Services Data Frames
Fr_Data = do.call(rbind,datalistFr)
Pss_Data = do.call(rbind,datalistPss)
Pre_Data = do.call(rbind,datalistPre)
#Adding Data into the Datalists
datalistFr_days[[k]]<-Fr_Data
datalistPss_days[[k]]<-Pss_Data
datalistPre_days[[k]]<-Pre_Data
source("Output_Days.R")
message("Day #", k)
}#end of day loop k
source("Output_SummaryStats.R")
source("Output_Visuals.R")
message("Done Gathering Data", l)
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
} #end of l loop for iterations.
# Analysis of Individual Fruit Items --------------------------------------
#1. Start from here
#This section creates a data frame with every item, Including repeated items, since it is a snapshot of the end of every service
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Create a vector to explain if something were in the share table
STYN_Vector<-c()
for (i in 1:nrow(Individual_Analysis_Fr)){
if (Individual_Analysis_Fr[i,colnames(Individual_Analysis_Fr)=="STtimes"]>0){
STYN_Vector<-c(STYN_Vector,1)
}else if(Individual_Analysis_Fr[i,colnames(Individual_Analysis_Fr)=="STtimes"]==0){
STYN_Vector<-c(STYN_Vector,0)
}
}
#4. Number of touches
Touches_Number<-lengths(regmatches(Individual_Analysis_Fr$History, gregexpr("Touched", Individual_Analysis_Fr$History)))
#5. Running Average Contamination of student that touches specific fruit.
ListTouches<-strsplit(Individual_Analysis_Fr$TouchesContHist,",")
ListTouches<-lapply(ListTouches, function(x) x[x!="NA"])
ListTouches<-lapply(ListTouches, function(x) as.numeric(x))
TouchesContHist<-sapply(X = ListTouches, FUN = mean)
Individual_Analysis_Fr$TouchesContHistAvr<-TouchesContHist
sum(is.na(TouchesContHist))
#6. Creation of Dataframe for indvidual Analysis
Analysis_Individual<-data.frame(
"InContamination"=Individual_Analysis_Fr$InContamination,
"TouchesNo"=Touches_Number,
"TouchesContHistAvr"=Individual_Analysis_Fr$TouchesContHistAvr,
"STTimes"= Individual_Analysis_Fr$STtimes,
"TotServices"=Individual_Analysis_Fr$TotServices,
"Shared"=STYN_Vector,
"DeltaCont"= (Individual_Analysis_Fr$Contamination-Individual_Analysis_Fr$InContamination),
"Contamination" = Individual_Analysis_Fr$Contamination
ggplot(data = Pcc2$PRCC, aes(x=rownames(Pcc2$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient Input vs Consumption")+
xlab("Input")+
coord_flip()
ggplot(data = Pcc2$PRCC, aes(x=rownames(Pcc2$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient Input vs Consumption")+
xlab("Input")+
coord_flip()
#8 Visuals , remaing the columns to that no error in ggplot
names(Pcc2$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
ggplot(data = Pcc2$PRCC, aes(x=rownames(Pcc2$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient Input vs Consumption")+
xlab("Input")+
coord_flip()
Pcc2<-pcc(X=Analysis_Individual[,1:7], y=Analysis_Individual$Contamination,rank = TRUE,nboot = 1000)
Pcc2
Pcc2<-pcc(X=Analysis_Individual[,1:7], y=Analysis_Individual$Contamination,rank = TRUE,nboot = 1000)
Analysis_Individual<-data.frame(
"InContamination"=Individual_Analysis_Fr$InContamination,
"TouchesNo"=Touches_Number,
"TouchesContHistAvr"=Individual_Analysis_Fr$TouchesContHistAvr,
"STTimes"= Individual_Analysis_Fr$STtimes,
"TotServices"=Individual_Analysis_Fr$TotServices,
"Shared"=STYN_Vector,
"DeltaCont"= (Individual_Analysis_Fr$Contamination-Individual_Analysis_Fr$InContamination),
"Contamination" = Individual_Analysis_Fr$Contamination
)
Pcc2<-pcc(X=Analysis_Individual[,1:7], y=Analysis_Individual$Contamination,rank = TRUE,nboot = 1000)
Pcc2
plot(Pcc2)
#8 Visuals , remaing the columns to that no error in ggplot
names(Pcc2$PRCC)=c("original", "bias" ,"std.error", "minci","maxci")
ggplot(data = Pcc2$PRCC, aes(x=rownames(Pcc2$PRCC),y=original ))+
geom_bar(stat = "identity", position = "identity")+
geom_errorbar(aes(ymin=minci, ymax=maxci), width=.1,col="blue")+
ylab("Partial Correlation Coefficient Input vs Consumption")+
xlab("Input")+
coord_flip()
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=TouchesNo))+
ylab("Contamination Initial")+
xlab("Contamination Final")+
scale_color_gradient(low="green", high="red", trans="log")
ggplot(data = Analysis_Individual, aes(x=DeltaCont, y = TouchesContHistAvr )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=Contamination))+
xlab("Change in Contamination")+
ylab("Contamination on student hands that touched fruit (average)")+
labs(col = "Final Contamination")+
scale_color_gradient(low="green", high="red", trans="log")
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=TouchesNo))+
ylab("Contamination Initial")+
xlab("Contamination Final")+
scale_color_gradient(low="green", high="red", trans="log")
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=STTimes))+
ylab("Contamination Initial")+
xlab("Contamination Final")+
scale_color_gradient(low="green", high="red", trans="log")
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=Shared))+
ylab("Contamination Initial")+
xlab("Contamination Final")+
scale_color_gradient(low="green", high="red", trans="log")
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=TotServices))+
ylab("Contamination Initial")+
xlab("Contamination Final")+
scale_color_gradient(low="green", high="red", trans="log")
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=TouchesNo))+
ylab("Contamination Initial")+
xlab("Contamination Final")+
scale_color_gradient(low="green", high="red", trans="log")
View(Analysis_Individual)
View(Individual_Analysis_Fr)
View(Analysis_Individual)
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
scale_x_log10()+
scale_y_log10()+
geom_point(aes(col=TouchesContHistAvr))+
ylab("Contamination Initial")+
xlab("Contamination Final")+
scale_color_gradient(low="green", high="red", trans="log")
