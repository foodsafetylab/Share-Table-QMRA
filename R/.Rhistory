"TotServices"=Individual_Analysis_Fr$TotServices,
"Shared"=STYN_Vector,
"DeltaCont"= (Individual_Analysis_Fr$Contamination-Individual_Analysis_Fr$InContamination),
"Contamination" = Individual_Analysis_Fr$Contamination
)
#7.  Sensitivity Analysis of table
# More graphs
mean(Analysis_Individual$TouchesNo)
View(Analysis_Individual)
Analysis_Individual$InContamination[Analysis_Individual$InContamination==0]<-(10^-5)
Analysis_Individual$Contamination[Analysis_Individual$Contamination==0]<-(10^-5)
#Analysis_Individual$TouchesContHistAvr[Analysis_Individual$TouchesContHistAvr==0]<-(10^-5)
Analysis_Individual$InContamination<-log10(Analysis_Individual$InContamination)
Analysis_Individual$Contamination<-log10(Analysis_Individual$Contamination)
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = log,n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log PFU/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=20)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=10)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
View(Analysis_Individual)
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=80)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log PFU/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=5)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
ggplot(data = Analysis_Individual, aes(x=Contamination, y = InContamination )) +
#scale_x_log10(n.breaks=10)+
#scale_y_log10(n.breaks=10)+
geom_point(aes(col=TouchesContHistAvr))+
geom_abline(slope=1, intercept=0)+
ylab("Contamination Initial Log  GEC/Item")+
xlab("Contamination Final Log GEC/Item")+
scale_color_gradient(guide="legend",name="Average TR",low="green", high="red",trans = scales::pseudo_log_trans(base = 10),n.breaks=5)+
ggtitle("Effect of Touches final Contamination")+
theme(plot.title = element_text(hjust = 0.5))+
theme(text = element_text(size=12))
Func_Cross_Contamination_Consumption_Wrapped<-function(Cont_Student, Data.Frame, Item_Picked, Item){
#Contamination of Fruit
Conta<-Func_Index_DF(Data.Frame,Item_Picked,"Contamination")
if(salmonella==1){
#update the Fr Contamination in Data frame
Tr_H_F<-Cont_Student*TE_H_F #Transfer from Hand to Fruit
Tr_F_H<-(Conta* TE_F_H) #Tranfer from fruit to hand
}else if(norovirus ==1 ){
Conta<-round(Conta,digits = 0)
Cont_Student<-round(Cont_Student,digits = 0)
Tr_H_F<-rbinom(n=1,size = Cont_Student, prob = TrP_H_S)
Tr_F_H<-rbinom(n=1,size = Conta,prob = TrP_S_H)
}
Overall_Tr<-(Tr_H_F-Tr_F_H)
Data.Frame[Fr_Picked,colnames(Data.Frame)== "TouchesContHist"]<-paste(Data.Frame[Fr_Picked,colnames(Data.Frame)=="TouchesContHist"], as.numeric(Overall_Tr),sep = ",") #Adding Contamination to
#Continuing Cross Contamination
Cont_Updated<- Conta + Overall_Tr #New Contamination of Fruit
Cont_Difference<-Conta-(Cont_Updated) #Difference in contamination to update student contamination
Data.Frame[Fr_Picked,colnames(Data.Frame)== "Contamination"]<-Cont_Updated #update the Fr Contamination in Data frame
Cont_Student<-ifelse(Cont_Student +(Cont_Difference)<0,0,Cont_Student +(Cont_Difference)) #Updating Contamination in Student's hands
#Adding Contamination to Inside of Fruit
if(salmonella==1){
#update the Fr Contamination in Data frame
Tr_H_F_Inside<-Cont_Student*TE_H_F
}else if (norovirus ==1){
Cont_Student<-round(Cont_Student,digits = 0)
Tr_H_F_Inside<-rbinom(n=1,size = Cont_Student, prob = TrP_H_F)
}
Overall_Tr<-Tr_H_F_Inside
Data.Frame[Fr_Picked,colnames(Data.Frame)== "TouchesContHist"]<-paste(Data.Frame[Fr_Picked,colnames(Data.Frame)=="TouchesContHist"], as.numeric(Overall_Tr),sep = ",") #Adding Contamination to
Cont_Fr_Consumed<-Tr_H_F_Inside
Data.Frame[Fr_Picked,colnames(Data.Frame)== "Contamination"]<- Cont_Updated
Data.Frame[Fr_Picked,colnames(Data.Frame)== "ContConsumed"]<- Cont_Fr_Consumed
if(Item=="Fruit"){
Fr_Data.Frame<<-Data.Frame
}else if(Item=="PSS"){
Pss_Data.Frame<<-Data.Frame
}
Cont_Student<<-Cont_Student
}
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
traceback()
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
#Visuals
source("Output_Visuals.R")
View(Fr_Data_Days)
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
View(Fr_Data.Frame_Days)
View(Pss_Data_Days)
View(Pre_Data_Days)
View(Fr_Data_Days)
#Setting Working Directory
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-QMRA/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#Opening Libary and Inputs
source("Util_Library.R")
#Inputs and Source Files
# Source Files ------------------------------------------------------------
start_time<-Sys.time()
#Inputs
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
#Running Loop
source("Main_Loops2.R")
View(Fr_Data_Days)
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Dose Response. Adding the Dose Response to the Items
DF_DR_Analysis<-Func_DR_Infection(DF_DR_Analysis)
DF_DR_Analysis<-Func_DR_Illness(DF_DR_Analysis)
#Number of Items per category
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
print(paste(Number_Inf_Fr ,"Students Infected"))
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
print(paste(Number_Ill_Fr ,"Students Ill"))
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Dose Response. Adding the Dose Response to the Items
DF_DR_Analysis<-Func_DR_Infection(DF_DR_Analysis)
DF_DR_Analysis<-Func_DR_Illness(DF_DR_Analysis)
#Number of Items per category
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
print(paste(Number_Inf_Fr ,"Students Infected"))
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
print(paste(Number_Ill_Fr ,"Students Ill"))
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Creating one data frame with the columns of interest to sort them ouy by student
DF_DR_Analysis<-bind_rows(Individual_Analysis_Fr,Individual_Analysis_Pss, Individual_Analysis_Pre)%>%
group_by(ConsumedBy)%>%
summarise(Contamination = sum(Contamination))
DF_DR_Analysis$Infection<-as.logical("")
DF_DR_Analysis$Illness<-as.logical("")
#Dose Response. Adding the Dose Response to the Items
DF_DR_Analysis<-Func_DR_Infection(DF_DR_Analysis)
DF_DR_Analysis<-Func_DR_Illness(DF_DR_Analysis)
#Number of Items per category
Number_Inf_Fr<-sum(DF_DR_Analysis$Infection==TRUE)
print(paste(Number_Inf_Fr ,"Students Infected"))
Number_Ill_Fr<-sum(DF_DR_Analysis$Illness==TRUE)
print(paste(Number_Ill_Fr ,"Students Ill"))
#Creating Data Frame of Consumed Items for all the products
#Fruit
#1. Start from here
Individual_Analysis_Fr<-bind_rows(List_Sens_Fr)
#Adding Type Column
Individual_Analysis_Fr$Type<-"Fruit"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#PSS
#1. Start from here
Individual_Analysis_Pss<-bind_rows(List_Sens_Pss)
#Adding Type Column
Individual_Analysis_Pss$Type<-"Pss"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pss<-Individual_Analysis_Pss %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
#Pre
#1. Start from here
Individual_Analysis_Pre<-bind_rows(List_Sens_Pre)
#Adding Type
Individual_Analysis_Pre$Type<-"Pre"
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Pre<-Individual_Analysis_Pre %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))%>%
filter(Location=="Consumed")%>%
select(ID,Type,ConsumedBy,Contamination, ContConsumed, Infection,Illness)
